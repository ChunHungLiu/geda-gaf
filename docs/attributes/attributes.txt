
The Complete Attribute Reference Doc

----------------------------------------------------------------------

Attributes are nothing but text items which take on the form: name=value
name can be anything just as long as it doesn't contain a =.  value can
also be anything just as long as it is something (vs nothing).  name= 
is not a valid attribute.  Also, there cannot be any spaces immediately
before or after the equals sign.

Attributes can be attached to some part of the symbol.  Either
a pin (if it's a pin number) or some other part of the symbol.

Attributes used to be required to be attached to something to be
attributes, but now they just have to exist in the symbol file as
name=value.  Expanding a bit on the last sentence, as long as the
text item has the format name=value, it is considered an attribute.
Attributes inside a symbol do not have to be attached to anything.
In order to see hidden attributes in gschem select Edit/Show Hidden Text.


Here is the current list of attributes which are used in the gEDA 
system:


device
(inside symbols only)	

device=device_name should be placed somewhere in the symbol and
made invisible.  device= is the device name and is required.  If the
object is a graphic then device= should be set to none (device=none).
It is no longer required to attach this attribute anything; just having
it exist as device=name is good enough.  Do not confuse this with just
having a text label which the device name.  Do not put spaces for the value
of this attribute; there are some programs which dislike spaces in the
device specifier.


graphical
(inside symbols only)

graphical=1 should exist somewhere in a symbol which is purely graphical
(such as a title block or decon symbol).  Symbols which have this
attribute have no electrical or circuit significance.  Don't forget to
set device=none (not really required but is nice to have).


pinseq
(inside symbols only)

Pin Sequeunce.
All pins must have a pinseq=# attribute attached to the pin object.
This attribute is used to give each pin an unique number.  This number
is a sequence number, which is used by various gnetlist backends.
gnetlist will output pins in the order of increasing pinseq.  The sequence
numbers start at 1 and should increase without skipping any numbers.
This attribute is not the pin number (i.e. device pin numbers, like
GND is 7 on 74 TTL).   This attribute should be hidden.  Examples:
pinseq=1 pinseq=2  pinseq=3   This attribute replaces the obsolete pin#=#
attribute.


pinnumber
(inside symbols only)

Pin Number.
All pins must have a pinnumber=# attribute attached to the pin object.
This attribute is the pin number (i.e. like GND is 7 on 74 TTL).
This attribute should be visible with the value only visible.  You also
need a pinseq attribute, see above.  Examples:  pinnumber=1 pinnumber=3
pinnumber=6   This attribute replaces the obsolete pin#=# attribute.


pintype
(inside symbols only attached to pins)

Each pin should have a pintype=value attribute attached to it.  Here
is a list of valid values:

in              input
out             output
io              input/output
oc              open collector
oe              open emitter
pas             passive
tp              totem pole
tri             tristate (high impedance)
clk             clock
pwr             power/ground

The pintype attribute is not used in the symbol library and might change
drastically (due to some disagreements on the mailing list).


numslots
(inside symbols only)

If a component has multiple slots in a package (such as a 7400 (NAND)
which has 4 NANDs per package) then you need a numslots=# attribute.
The # is the number of slots the device has.  numslots= should be exist
somewhere in the symbol and made invisible.  Additional slot related
required attributes are below.


slotdef
(inside symbols only)

If a component has multiple slots in a package then you also need to
attach a slotdef=slotnumber:#,#,#...  for every slot the component has.
The slotnumber corresponds to the slot number.   The colon after the
slot number is required.  If a device has 4 slots then there would
be  slotdef=1:..., slotdef=2:..., slotdef=3:..., and a slotdef=4:...
attributes somewhere in the symbol and made invisible.  The subsequent
#'s have a one-to-one correspondence to the pinseq attributes and specify
what the pinnumber=# should be when that slot is set.  See 7400-1.sym
as an example of how this should all work.  It is recommended that all
symbols which have slots have a slot=1 attribute attached in the same
fashion as the device= attributed.   Examples: slotdef=1:1,2,3
slotdef=2:4,5,6  slotdef=3:9,10,8  slotdef=4:12,13,11   This attribute
replaces the obsolute slot#=# attribute.


footprint
(inside symbols only)

footprint=package_name should exist somewhere in the symbol which might
be used with the netlister.  Attach this attribute just like the device=
attribute.  package_name is the pcb footprint or package type like DIP14
or DIP40.  This is very new and so I'm not 100% sure this attribute will
be call this or what the values should be, so it's not required yet.
None of the current libraries use this.


label
(schematics)

If you want to label a net then attach an attribute called label=value to
the net.  All nets which have the same name are considered electrically
connected.  


pinlabel
(inside symbols attached to pins)

All pins should also have the pinlabel=label attribute attached to them.
This is visible label associated with each pin.  Please make this
attribute green (instead of the default attribute yellow).  Right now,
the symbol libraries do not follow this convention, but they will.  


name
(should not be used anywhere)

The name= attribute should not be attached anywhere in the symbol.
It's currently unused and is considered ambiguous.


uref
(both symbols and schematics )

This attribute is used to specify the reference name to a particular
instantiated component.  It should be on ALL components which have some
sort of electrical significance.  This attribute can also be on the
inside of a symbol (it will be promoted, ie attached to the outside of
the symbol, if it is visible).


net
(both schematics and inside symbols)

The net= attribute is used to create power/ground and arbitrary nets.
Please see the net= attribute MINI-HOWTO for more info.  The net=
attribute is not currently used by the symbol library, but is supported
by gnetlist


source
(schematics only)

The source= attribute is used to specify that a symbol has underlying
schematics.  The source= attribute mechanism for specifing underlying
schematics is in addition to the symbol/schematic sheet mechanism
mentioned elsewhere.  This attribute should only be attached to
instantiated components.  Attach the attribute to a component and specify
the filename (not the path) of the underlying schematic (like block_1.sch)
for the value.  The specified schematic must be in a source-library
path.  This attribute can be attached multiple times with different values
which basically means that there are multiple underlying schematics.


value
(schematics only)

Used mainly in the spice backend netlister to specify the value of the
various elements.  No translation is done on this, and it is placed as
is into the netlist.

