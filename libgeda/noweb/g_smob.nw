@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File g_smob.c,,,Top
@chapter File @file{g_smob.c}

@section File header

<<g_smob.c : *>>=
<<g_smob.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/g_smob.nw instead */

<<g_smob.c : include directives>>
<<g_smob.c : global variables>>
<<g_smob.c : g_free_attrib_smob()>>
<<g_smob.c : g_print_attrib_smob()>>
<<g_smob.c : g_make_attrib_smob()>>
<<g_smob.c : g_get_attrib_name_value()>>
<<g_smob.c : g_set_attrib_value_internal()>>
<<g_smob.c : g_init_attrib_smob()>>

<<g_smob.c : g_free_object_smob()>>
<<g_smob.c : g_print_object_smob()>>
<<g_smob.c : g_make_object_smob()>>
<<g_smob.c : g_get_object_attributes()>>
<<g_smob.c : g_init_object_smob()>>
/*
<<g_smob.c : g_get_object_from_object_smob()>>
<<g_smob.c : g_get_toplevel_from_object_smob()>>
*/
<<g_smob.c : g_get_data_from_object_smob()>>
@ 


<<g_smob.c : copyright and license>>=
/* -*- geda-c -*-
 * gEDA - GPL Electronic Design Automation
 * libgeda - gEDA's library
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<g_smob.c : include directives>>=
#include <config.h>

#include <math.h>
#include <stdio.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif

#include <gtk/gtk.h>
#include <libguile.h>

#include "defines.h"
#include "struct.h"
#include "globals.h"

#include "../include/prototype.h"

#ifdef HAVE_LIBDMALLOC
#include <dmalloc.h>
#endif

@ 


<<g_smob.c : global variables>>=
static long attrib_smob_tag;
static long object_smob_tag;

@ %def attrib_smob_tag


@section Function @code{g_free_attrib_smob()}

@defun g_free_attrib_smob attrib_smob
Free the memory allocated by the [[attribute smob]] and returns its size.
@end defun

<<g_smob.c : g_free_attrib_smob()>>=
static scm_sizet
g_free_attrib_smob(SCM attrib_smob)
{
  struct st_attrib_smob *attribute = 
  (struct st_attrib_smob *)SCM_CDR(attrib_smob);
  scm_sizet size = sizeof(struct st_attrib_smob);

  free(attribute);
  return size;
}

@ %def g_free_attrib_smob


@section Function @code{g_print_attrib_smob()}

@defun g_print_attrib_smob attrib_smob port pstate
This function prints the given [[attribute smob]] to the [[port]]. It just prints a string showing it is an attribute and its string.
@end defun

<<g_smob.c : g_print_attrib_smob()>>=
static int
g_print_attrib_smob(SCM attrib_smob, SCM port, scm_print_state *pstate)
{
  struct st_attrib_smob *attribute = 
  (struct st_attrib_smob *)SCM_CDR(attrib_smob);

  if (attribute &&
      attribute->attribute &&
      attribute->attribute->object &&
      attribute->attribute->object->text &&
      attribute->attribute->object->text->string ) {
    scm_puts("#<attribute ", port);
    scm_display (scm_makfrom0str (attribute->attribute->object->text->string),
                 port);
    scm_puts(">", port);
  }
	
  /* non-zero means success */
  return 1;
}

@ %def g_print_attrib_smob


@section Function @code{g_make_attrib_smob()}

@defun g_make_attrib_smob curr_w curr_attr
Creates and returns a new attribute smob, based on the given TOPLEVEL [[curr_w]] and attribute [[curr_attr]].
@end defun

<<g_smob.c : g_make_attrib_smob()>>=
/* Creates a name-value smob */
SCM
g_make_attrib_smob(TOPLEVEL *curr_w, ATTRIB *curr_attr)
{
  struct st_attrib_smob *smob_attribute;

  smob_attribute = (struct st_attrib_smob *)scm_must_malloc(
                                                            sizeof(struct st_attrib_smob), "attribute");

  smob_attribute->world     = curr_w;
  smob_attribute->attribute = curr_attr;

  /* Assumes Guile version >= 1.3.2 */
  SCM_RETURN_NEWSMOB(attrib_smob_tag, smob_attribute);
}

@ %def g_make_attrib_smob


@section Function @code{g_get_attrib_name_value()}

@defun g_get_attrib_name_value attrib_smob
Returns a list with the name and value of the given [[attribute smob]].
@end defun

<<g_smob.c : g_get_attrib_name_value()>>=
SCM
g_get_attrib_name_value(SCM attrib_smob)
{
  struct st_attrib_smob *attribute;
  char *name = NULL;
  char *value = NULL;
  SCM returned = SCM_EOL;

  SCM_ASSERT ( SCM_NIMP(attrib_smob) && 
               ((long) SCM_CAR(attrib_smob) == attrib_smob_tag),
               attrib_smob, SCM_ARG1, "get-attribute-name-value");

  attribute = (struct st_attrib_smob *)SCM_CDR(attrib_smob);

  if (attribute &&
      attribute->attribute &&
      attribute->attribute->object &&
      attribute->attribute->object->text->string ) {
    o_attrib_get_name_value(attribute->attribute->object->text->string, 
                            &name, &value );
    returned = scm_cons (scm_makfrom0str (name),
                         scm_makfrom0str (value));
    if (name) free(name);
    if (value) free(value);
  }

  return returned;
}

@ %def g_get_attrib_name_value


@section Function @code{g_set_attrib_value_internal()}

@defun g_set_attrib_value_internal attrib_smob scm_value world o_attrib new_string
The return value is always SCM_UNDEFINED.
This function puts into a [[new string]] the [[attrib smob]] name and the new [[scm_value]] (attribute=value format). It also returns the [[TOPLEVEL]] and [[OBJECT]] pointers.
@end defun

<<g_smob.c : g_set_attrib_value_internal()>>=
SCM
g_set_attrib_value_internal(SCM attrib_smob, SCM scm_value, 
			    TOPLEVEL **world, OBJECT **o_attrib, char *new_string[])
{
  struct st_attrib_smob *attribute;
  char *name = NULL;
  char *value = NULL;
  char *old_value = NULL;

  SCM_ASSERT ( SCM_NIMP(attrib_smob) && 
               ((long) SCM_CAR(attrib_smob) == attrib_smob_tag),
               attrib_smob, SCM_ARG1, "set-attribute-value!");
  SCM_ASSERT ( SCM_NIMP(scm_value) && SCM_STRINGP(scm_value),
               scm_value, SCM_ARG2, "set-attribute-value!");

  attribute = (struct st_attrib_smob *)SCM_CDR(attrib_smob);
  value = SCM_STRING_CHARS (scm_value);

  if (attribute &&
      attribute->attribute &&
      attribute->attribute->object &&
      attribute->attribute->object->text &&
      attribute->attribute->object->text->string ) {

    o_attrib_get_name_value(attribute->attribute->object->text->string, 
                            &name, &old_value );

    *new_string = g_strconcat (name, "=", value, NULL);
		
    *world = attribute->world;
    *o_attrib = attribute->attribute->object;

    if (name) free(name);
    if (old_value) free(old_value);
  }

  return SCM_UNDEFINED;
}

@ %def g_set_attrib_value_internal


@section Function @code{g_init_attrib_smob()}

@defun g_init_attrib_smob
Initialize the framework to support an attrib smob.
@end defun

<<g_smob.c : g_init_attrib_smob()>>=
void
g_init_attrib_smob(void)
{

  attrib_smob_tag = scm_make_smob_type("attribute", sizeof (struct st_attrib_smob));
  scm_set_smob_mark(attrib_smob_tag, 0);
  scm_set_smob_free(attrib_smob_tag, g_free_attrib_smob);
  scm_set_smob_print(attrib_smob_tag, g_print_attrib_smob);

  scm_c_define_gsubr("get-attribute-name-value", 1, 0, 0, g_get_attrib_name_value);

  return;
}

@ %def g_init_attrib_smob



@section Function @code{g_free_attrib_smob()}

@defun g_free_object_smob object_smob
Free the memory allocated by the [[object smob]] and returns its size.
@end defun

<<g_smob.c : g_free_object_smob()>>=
static scm_sizet
g_free_object_smob(SCM object_smob)
{
  struct st_object_smob *object = 
  (struct st_object_smob *)SCM_CDR(object_smob);
  scm_sizet size = sizeof(struct st_object_smob);

  free(object);
  return size;
}

@ %def g_free_object_smob

@section Function @code{g_print_object_smob()}

@defun g_print_object_smob object_smob port pstate
This function prints the given [[object smob]] to the [[port]]. It just prints a string showing it is an object and the object name.
@end defun

<<g_smob.c : g_print_object_smob()>>=
static int
g_print_object_smob(SCM object_smob, SCM port, scm_print_state *pstate)
{
  struct st_object_smob *object = 
  (struct st_object_smob *)SCM_CDR(object_smob);

  if (object &&
      object->object &&
      object->object->name) {
    scm_puts("#<object ", port);
    scm_display (scm_makfrom0str (object->object->name),
                 port);
    scm_puts(">", port);
  }
	
  /* non-zero means success */
  return 1;
}

@ %def g_print_object_smob

@section Function @code{g_make_object_smob()}

@defun g_make_object_smob curr_w curr_attr
Creates and returns an [[object smob]] from the given TOPLEVEL\'s [[curr_w]] and [[object]] pointers.
@end defun

<<g_smob.c : g_make_object_smob()>>=
/* Creates an object smob */
SCM
g_make_object_smob(TOPLEVEL *curr_w, OBJECT *object)
{
  struct st_object_smob *smob_object;

  smob_object = (struct st_object_smob *)
    scm_must_malloc(sizeof(struct st_object_smob), "object");

  smob_object->world  = curr_w;
  smob_object->object = object;

  /* Assumes Guile version >= 1.3.2 */
  SCM_RETURN_NEWSMOB(object_smob_tag, smob_object);
}

@ %def g_make_object_smob


@section Function @code{g_get_object_attributes()}

@defun g_get_object_attributes object_smob
This function returns a list with all the attributes of the given [[object smob]].
@end defun

<<g_smob.c : g_get_object_attributes()>>=
SCM
g_get_object_attributes(SCM object_smob)
{
  TOPLEVEL *w_current;
  struct st_object_smob *object;
  SCM returned = SCM_EOL;

  SCM_ASSERT ( SCM_NIMP(object_smob) && 
               ((long) SCM_CAR(object_smob) == object_smob_tag),
               object_smob, SCM_ARG1, "get-object-attributes");

  object = (struct st_object_smob *)SCM_CDR(object_smob);

  if (object &&
      object->object) {
    ATTRIB *pointer;
    
    pointer = object->object->attribs;
    w_current = object->world;
    while (pointer != NULL) {
      if (pointer->object &&
	  pointer->object->text) {
	returned = scm_cons (g_make_attrib_smob (w_current, pointer), returned);
      }
      pointer = pointer->next;
    }     
  }

  return returned;
}

@ %def g_get_object_attributes


@section Function @code{g_init_object_smob()}

@defun g_init_object_smob
Initialize the framework to support an object smob.
@end defun

<<g_smob.c : g_init_object_smob()>>=
void
g_init_object_smob(void)
{

  object_smob_tag = scm_make_smob_type("object", sizeof (struct st_object_smob));
  scm_set_smob_mark(object_smob_tag, 0);
  scm_set_smob_free(object_smob_tag, g_free_object_smob);
  scm_set_smob_print(object_smob_tag, g_print_object_smob);

  scm_c_define_gsubr("get-object-attributes", 1, 0, 0, g_get_object_attributes);

  return;
}

@ %def g_init_object_smob

@section Function @code{g_free_attrib_smob()}

@defun g_get_object_from_object_smob object_smob
Gets the [[object]] data from the [[object smob]].
@end defun

<<g_smob.c : g_get_object_from_object_smob()>>=
OBJECT *
g_get_object_from_object_smob(SCM object_smob)
{
  
  SCM_ASSERT ( SCM_NIMP(object_smob) && 
               (SCM_CAR(object_smob) == object_smob_tag),
               object_smob, SCM_ARG1, "get_object_from_object_smob");
  return ((OBJECT *) (((struct st_object_smob *)SCM_CDR(object_smob))->object));
}

@ %def g_get_object_from_object_smob

@defun g_get_object_from_object_smob object_smob
@end defun

<<g_smob.c : g_get_toplevel_from_object_smob()>>=
TOPLEVEL *
g_get_toplevel_from_object_smob(SCM object_smob)
{
  
  SCM_ASSERT ( SCM_NIMP(object_smob) && 
               (SCM_CAR(object_smob) == object_smob_tag),
               object_smob, SCM_ARG1, "get_toplevel_from_object_smob");
  return ((TOPLEVEL *) (((struct st_object_smob *)SCM_CDR(object_smob))->world));
}

@ %def g_get_toplevel_from_object_smob

@defun g_get_data_from_object_smob object_smob
This function gets the [[toplevel]] and [[object]] data stored in an [[object_smob]].
It returns FALSE if the smob is not an object smob, and TRUE otherwise.
The pointers [[toplevel]] and [[object]] are used to return the data. If any of them is NULL, then it is just ignored.
@end defun

<<g_smob.c : g_get_data_from_object_smob()>>=
gboolean
g_get_data_from_object_smob(SCM object_smob, TOPLEVEL **toplevel, 
                            OBJECT **object)
{
  
  if ( (!SCM_NIMP(object_smob)) || 
       ((long) SCM_CAR(object_smob) != object_smob_tag) ) {
    return(FALSE);
  }
  if (toplevel != NULL) {
    *toplevel = (TOPLEVEL *) 
    (((struct st_object_smob *)SCM_CDR(object_smob))->world);
  }
  if (object != NULL) {
    *object = (OBJECT *) 
    (((struct st_object_smob *)SCM_CDR(object_smob))->object);
  }
  return (TRUE);
}

@ %def g_get_data_from_object_smob
