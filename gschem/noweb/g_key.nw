@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File g_key.c,,,Top
@chapter File @file{g_key.c}

@section File header

<<g_key.c : *>>=
<<g_key.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/g_key.nw instead */

<<g_key.c : include directives>>
<<g_key.c : set_window_current_key()>>
<<g_key.c : g_key_execute()>>
<<g_key.c : g_key_*()>>
<<g_key.c : g_get_selected_filename()>>
<<g_key.c : g_get_selected_component_attributes()>>

@


<<g_key.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * gschem - gEDA Schematic Capture
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<g_key.c : include directives>>=
#include <config.h>

#include <stdio.h>
#include <sys/stat.h>
#include <ctype.h>
#ifdef HAVE_STRING_H
#include <string.h>
#endif
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif

#include <libgeda/libgeda.h>

#include "../include/globals.h"
#include "../include/prototype.h"

@


@section Function @code{set_window_current_key()}

@defun set_window_current_key w_current
@end defun

<<g_key.c : set_window_current_key()>>=
void
set_window_current_key(TOPLEVEL *w_current)
{
       /*window_current = w_current;*/
       /* this function is now a nop, remove it */
}


@ %def set_window_current_key


@section Function @code{g_key_execute()}

@defun g_key_execute state keyval
@end defun

<<g_key.c : g_key_execute()>>=
/* for now this only supports single chars, not shift/alt/ctrl etc... */
void
g_key_execute(int state, int keyval)
{
  /* TODO: the size is hack */
  char guile_string[50];
  char modifier[10];

  if (keyval == 0) {
    return;
  }

  if (state & GDK_SHIFT_MASK) {
    strcpy(modifier, "\"Shift ");
  } else if (state & GDK_CONTROL_MASK) {
    strcpy(modifier, "\"Control ");
  } else if (state & GDK_MOD1_MASK) {
    strcpy(modifier, "\"Alt ");
  } else {
    modifier[0] = '\"';
    modifier[1] = '\0';
  }

#if 0 /* old non-portable way */
  /* don't pass the raw modifier key presses to the guile code */
  if (strstr(XKeysymToString(keyval), "Alt")) {
    return;
  }

  if (strstr(XKeysymToString(keyval), "Shift")) {
    return;
  }

  if (strstr(XKeysymToString(keyval), "Control")) {
    return;
  }

  sprintf(guile_string, "(press-key %s%s\")",
          modifier, XKeysymToString (keyval));
#endif

  /* don't pass the raw modifier key presses to the guile code */
  if (strstr(gdk_keyval_name(keyval), "Alt")) {
    return;
  }

  if (strstr(gdk_keyval_name(keyval), "Shift")) {
    return;
  }

  if (strstr(gdk_keyval_name(keyval), "Control")) {
    return;
  }

  sprintf(guile_string, "(press-key %s%s\")",
          modifier, gdk_keyval_name (keyval));

#if DEBUG 
  printf("_%s_\n", guile_string);
#endif
  gh_eval_str(guile_string);

#if 0 /* playing with thi's guile stuff */
  gh_eval_str("(display (reverse last-command-sequence))");
  printf("\n");
#endif
}


@ %def g_key_execute


@section Functions @code{g_key_*()}

<<g_key.c : g_key_*()>>=
#define DEFINE_G_KEY(name)				\
SCM g_key_ ## name(void)				\
{							\
	i_callback_ ## name(global_window_current, 0, NULL);	\
	return SCM_BOOL_T;				\
}

DEFINE_G_KEY(file_new)

DEFINE_G_KEY(file_new_window)

/* don't use the widget parameter on this function, or do some checking... */
/* since there is a call: widget = NULL, data = 0 (will be w_current) */
/* This should be renamed to page_open perhaps... */
DEFINE_G_KEY(file_open)

/* don't use the widget parameter on this function, or do some checking... */
/* since there is a call: widget = NULL, data = 0 (will be w_current) */
DEFINE_G_KEY(file_script)

/* don't use the widget parameter on this function, or do some checking... */
/* since there is a call: widget = NULL, data = 0 (will be w_current) */
DEFINE_G_KEY(file_save)
DEFINE_G_KEY(file_save_as)
DEFINE_G_KEY(file_save_all)
DEFINE_G_KEY(file_print)
DEFINE_G_KEY(file_write_png)

/* don't use the widget parameter on this function, or do some checking... */
/* since there is a call: widget = NULL, data = 0 (will be w_current) */
/* this function closes a window */
DEFINE_G_KEY(file_close)
DEFINE_G_KEY(file_quit)

/* Select also does not update the middle button shortcut */
DEFINE_G_KEY(edit_undo)
DEFINE_G_KEY(edit_redo)
DEFINE_G_KEY(edit_select)
DEFINE_G_KEY(edit_copy)
DEFINE_G_KEY(edit_copy_hotkey)
DEFINE_G_KEY(edit_move)
DEFINE_G_KEY(edit_move_hotkey)
DEFINE_G_KEY(edit_delete)
DEFINE_G_KEY(edit_rotate_90)
DEFINE_G_KEY(edit_rotate_90_hotkey)
DEFINE_G_KEY(edit_mirror)
DEFINE_G_KEY(edit_mirror_hotkey)
#if 0 /* obsolete */
DEFINE_G_KEY(edit_stretch)
DEFINE_G_KEY(edit_stretch_hotkey)
#endif
DEFINE_G_KEY(edit_slot)
DEFINE_G_KEY(edit_color)
DEFINE_G_KEY(edit_edit)
DEFINE_G_KEY(edit_text)
DEFINE_G_KEY(edit_lock)
DEFINE_G_KEY(edit_unlock)
DEFINE_G_KEY(edit_linetype)
DEFINE_G_KEY(edit_filltype)
DEFINE_G_KEY(edit_translate)
DEFINE_G_KEY(edit_embed)
DEFINE_G_KEY(edit_unembed)
DEFINE_G_KEY(edit_update)
DEFINE_G_KEY(edit_show_hidden)
DEFINE_G_KEY(edit_make_visible)
DEFINE_G_KEY(edit_find)
DEFINE_G_KEY(edit_show_text)
DEFINE_G_KEY(edit_hide_text)
DEFINE_G_KEY(edit_autonumber_text)

DEFINE_G_KEY(buffer_copy1)
DEFINE_G_KEY(buffer_copy2)
DEFINE_G_KEY(buffer_copy3)
DEFINE_G_KEY(buffer_copy4)
DEFINE_G_KEY(buffer_copy5)
DEFINE_G_KEY(buffer_cut1)
DEFINE_G_KEY(buffer_cut2)
DEFINE_G_KEY(buffer_cut3)
DEFINE_G_KEY(buffer_cut4)
DEFINE_G_KEY(buffer_cut5)
DEFINE_G_KEY(buffer_paste1)
DEFINE_G_KEY(buffer_paste2)
DEFINE_G_KEY(buffer_paste3)
DEFINE_G_KEY(buffer_paste4)
DEFINE_G_KEY(buffer_paste5)
DEFINE_G_KEY(buffer_paste1_hotkey)
DEFINE_G_KEY(buffer_paste2_hotkey)
DEFINE_G_KEY(buffer_paste3_hotkey)
DEFINE_G_KEY(buffer_paste4_hotkey)
DEFINE_G_KEY(buffer_paste5_hotkey)

/* repeat middle shortcut doesn't make sense on redraw, just hit right
 * button */
DEFINE_G_KEY(view_redraw)

/* for these functions, repeat middle shortcut would get into the way
 * of what user is try to do */
DEFINE_G_KEY(view_zoom_full)
DEFINE_G_KEY(view_zoom_extents)
DEFINE_G_KEY(view_zoom_in)
DEFINE_G_KEY(view_zoom_out)
DEFINE_G_KEY(view_zoom_in_hotkey)
DEFINE_G_KEY(view_zoom_out_hotkey)

DEFINE_G_KEY(view_zoom_box)
DEFINE_G_KEY(view_zoom_box_hotkey)
DEFINE_G_KEY(view_pan)
DEFINE_G_KEY(view_pan_hotkey)
DEFINE_G_KEY(view_update_cues)
DEFINE_G_KEY(page_manager)
DEFINE_G_KEY(page_next)
DEFINE_G_KEY(page_prev)
DEFINE_G_KEY(page_new)
DEFINE_G_KEY(page_close)
DEFINE_G_KEY(page_revert)
DEFINE_G_KEY(page_discard)
DEFINE_G_KEY(page_print)
DEFINE_G_KEY(add_component)
DEFINE_G_KEY(add_attribute)
DEFINE_G_KEY(add_attribute_hotkey)
DEFINE_G_KEY(add_net)
DEFINE_G_KEY(add_net_hotkey)
DEFINE_G_KEY(add_bus)
DEFINE_G_KEY(add_bus_hotkey)
DEFINE_G_KEY(add_text)
DEFINE_G_KEY(add_line)
DEFINE_G_KEY(add_line_hotkey)
DEFINE_G_KEY(add_box)
DEFINE_G_KEY(add_box_hotkey)
DEFINE_G_KEY(add_circle)
DEFINE_G_KEY(add_circle_hotkey)
DEFINE_G_KEY(add_arc)
DEFINE_G_KEY(add_arc_hotkey)
DEFINE_G_KEY(add_pin)
DEFINE_G_KEY(add_pin_hotkey)
DEFINE_G_KEY(hierarchy_down_schematic)
DEFINE_G_KEY(hierarchy_down_symbol)
DEFINE_G_KEY(hierarchy_up)
DEFINE_G_KEY(hierarchy_documentation)
DEFINE_G_KEY(attributes_attach)
DEFINE_G_KEY(attributes_detach)
DEFINE_G_KEY(attributes_show_name)
DEFINE_G_KEY(attributes_show_value)
DEFINE_G_KEY(attributes_show_both)
DEFINE_G_KEY(attributes_visibility_toggle)

/* i_callback_script_console is not currently implemented */
DEFINE_G_KEY(script_console)

/* repeat last command doesn't make sense on options either??? (does
 * it?) */
DEFINE_G_KEY(options_text_size)

/* repeat last command doesn't make sense on options either??? (does
 * it?) */
DEFINE_G_KEY(options_afeedback)
DEFINE_G_KEY(options_grid)
DEFINE_G_KEY(options_snap)
DEFINE_G_KEY(options_snap_size)
DEFINE_G_KEY(options_rubberband)
DEFINE_G_KEY(options_show_log_window)
DEFINE_G_KEY(options_show_coord_window)
DEFINE_G_KEY(misc)
DEFINE_G_KEY(misc2)
DEFINE_G_KEY(misc3)

DEFINE_G_KEY(help_about)
DEFINE_G_KEY(help_manual)
DEFINE_G_KEY(help_hotkeys)

/* be sure that you don't use the widget parameter in this one, since it is
being called with a null, I suppose we should call it with the right param.
hack */
DEFINE_G_KEY(cancel)

@ %def DEFINE_G_KEY g_key_file_new g_key_file_new_window g_key_file_open g_key_file_script g_key_file_save g_key_file_save_as g_key_file_save_all g_key_file_print g_key_file_write_png g_key_file_close g_key_file_quit g_key_edit_undo g_key_edit_redo g_key_edit_select g_key_edit_copy g_key_edit_copy_hotkey g_key_edit_move g_key_edit_move_hotkey g_key_edit_delete g_key_edit_rotate_90 g_key_edit_rotate_90_hotkey g_key_edit_mirror g_key_edit_mirror_hotkey g_key_edit_stretch g_key_edit_stretch_hotkey g_key_edit_slot g_key_edit_color g_key_edit_edit g_key_edit_text g_key_edit_lock g_key_edit_unlock g_key_edit_linetype g_key_edit_filltype g_key_edit_translate g_key_edit_embed g_key_edit_unembed g_key_edit_show_hidden g_key_buffer_copy1 g_key_buffer_copy2 g_key_buffer_copy3 g_key_buffer_copy4 g_key_buffer_copy5 g_key_buffer_cut1 g_key_buffer_cut2 g_key_buffer_cut3 g_key_buffer_cut4 g_key_buffer_cut5 g_key_buffer_paste1 g_key_buffer_paste2 g_key_buffer_paste3 g_key_buffer_paste4 g_key_buffer_paste5 g_key_buffer_paste1_hotkey g_key_buffer_paste2_hotkey g_key_buffer_paste3_hotkey g_key_buffer_paste4_hotkey g_key_buffer_paste5_hotkey g_key_view_redraw g_key_view_zoom_full g_key_view_zoom_extents g_key_view_zoom_in g_key_view_zoom_out g_key_view_zoom_in_hotkey g_key_view_zoom_out_hotkey g_key_view_zoom_box g_key_view_zoom_box_hotkey g_key_view_pan g_key_view_pan_hotkey g_key_view_update_cues g_key_page_manager g_key_page_next g_key_page_prev g_key_page_new g_key_page_close g_key_page_revert g_key_page_discard g_key_page_print g_key_add_component g_key_add_attribute g_key_add_attribute_hotkey g_key_add_net g_key_add_net_hotkey g_key_add_bus g_key_add_bus_hotkey g_key_add_text g_key_add_line g_key_add_line_hotkey g_key_add_box g_key_add_box_hotkey g_key_add_circle g_key_add_circle_hotkey g_key_add_arc g_key_add_arc_hotkey g_key_add_pin g_key_add_pin_hotkey g_key_hierarchy_down_schematic g_key_hierarchy_down_symbol g_key_hierarchy_up g_key_hierarchy_documentation g_key_attributes_attach g_key_attributes_detach g_key_attributes_show_name g_key_attributes_show_value g_key_attributes_show_both g_key_attributes_visibility_toggle g_key_script_console g_key_options_text_size g_key_options_afeedback g_key_options_grid g_key_options_snap g_key_options_snap_size g_key_options_rubberband g_key_options_show_log_window g_key_options_show_coord_window g_key_misc g_key_misc2 g_key_misc3 g_key_help_about g_key_help_manual g_key_help_hotkeys g_key_cancel


@section Function @code{g_get_selected_filename()}

@defun g_get_selected_filename 
@end defun

<<g_key.c : g_get_selected_filename()>>=
/*help for generate-netlist hot key*/
SCM g_get_selected_filename(void)                     
{                                                     
	return (get_selected_filename(global_window_current, 0, NULL));
}


@ %def g_get_selected_filename


@section Function @code{g_get_selected_component_attributes()}

@defun g_get_selected_component_attributes 
@end defun

<<g_key.c : g_get_selected_component_attributes()>>=
SCM g_get_selected_component_attributes(void)                 
{                                                     
	return (get_selected_component_attributes(global_window_current, 0, NULL));
}


@ %def g_get_selected_component_attributes



