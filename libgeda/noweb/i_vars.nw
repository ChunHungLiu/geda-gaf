@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File i_vars.c,,,Top
@chapter File @file{i_vars.c}

@section File header

<<i_vars.c : *>>=
<<i_vars.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/i_vars.nw instead */

<<i_vars.c : include directives>>
<<i_vars.c : macros>>
<<i_vars.c : global variables>>
<<i_vars.c : i_vars_libgeda_set()>>
<<i_vars.c : i_vars_setnames()>>
<<i_vars.c : i_vars_freenames()>>


@


<<i_vars.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * libgeda - gEDA's Library
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<i_vars.c : include directives>>=
#include <config.h>
#include <stdio.h>

#include <gtk/gtk.h>
#include <libguile.h>

#include "defines.h"
#include "struct.h"
#include "globals.h"
#include "o_types.h"
#include "colors.h"
#include "papersizes.h"
#include "i_vars.h"

#include "../include/prototype.h"

#ifdef HAVE_LIBDMALLOC
#include <dmalloc.h>
#endif

@


<<i_vars.c : macros>>=
#define INIT_STR(w, name, str) {                                        \
        if ((w)->name) {                                                \
                free((w)->name);                                        \
        }                                                               \
        (w)->name = u_basic_strdup(((default_ ## name) != NULL) ?       \
                                (default_ ## name) : (str));            \
}

/* Kazu Hirata <kazu@seul.org> on July 16, 1999 - Added these absolute
 * defaults used when default_... is NULL. */
#define DEFAULT_SERIES_NAME      "untitled"
#define DEFAULT_UNTITLED_NAME    "untitled"
#define DEFAULT_SCHEME_DIRECTORY "./"
#define DEFAULT_FONT_DIRECTORY   "../lib/sym/font"
#define DEFAULT_BITMAP_DIRECTORY "../lib/bitmaps"
#define DEFAULT_BUS_RIPPER_SYMNAME "busripper-1.sym"

@ %def INIT_STR DEFAULT_SERIES_NAME DEFAULT_UNTITLED_NAME DEFAULT_SCHEME_DIRECTORY DEFAULT_FONT_DIRECTORY DEFAULT_BITMAP_DIRECTORY



<<i_vars.c : global variables>>=
int   default_init_right = WIDTH_C;
int   default_init_bottom = HEIGHT_C;
char *default_series_name = NULL;
char *default_untitled_name = NULL;
char *default_font_directory = NULL;
char *default_scheme_directory = NULL;
char *default_bitmap_directory = NULL;
char *default_bus_ripper_symname = NULL;


@ %def default_init_right default_init_bottom



@section Function @code{i_vars_libgeda_set()}

@defun i_vars_libgeda_set w_current
@end defun

<<i_vars.c : i_vars_libgeda_set()>>=
void
i_vars_libgeda_set(TOPLEVEL *w_current)
{
  w_current->init_right   = default_init_right;
  w_current->init_bottom  = default_init_bottom;

  /* you cannot free the default* strings here since new windows */
  /* need them */
  INIT_STR(w_current, series_name     , DEFAULT_SERIES_NAME     );
  INIT_STR(w_current, untitled_name   , DEFAULT_UNTITLED_NAME   );
  INIT_STR(w_current, font_directory  , DEFAULT_FONT_DIRECTORY  );
  INIT_STR(w_current, scheme_directory, DEFAULT_SCHEME_DIRECTORY);
  INIT_STR(w_current, bitmap_directory, DEFAULT_BITMAP_DIRECTORY);
  INIT_STR(w_current, bus_ripper_symname, DEFAULT_BUS_RIPPER_SYMNAME);
}

@ %def i_vars_libgeda_set


@section Function @code{i_vars_setnames()}

@defun i_vars_setnames w_current
@end defun

<<i_vars.c : i_vars_setnames()>>=
void
i_vars_setnames(TOPLEVEL *w_current)
{
  w_current->series_name      = u_basic_strdup(DEFAULT_SERIES_NAME     );
  w_current->untitled_name    = u_basic_strdup(DEFAULT_UNTITLED_NAME   );
  w_current->font_directory   = u_basic_strdup(DEFAULT_FONT_DIRECTORY  );
  w_current->scheme_directory = u_basic_strdup(DEFAULT_SCHEME_DIRECTORY);
  w_current->bitmap_directory = u_basic_strdup(DEFAULT_BITMAP_DIRECTORY);
  w_current->bus_ripper_symname = u_basic_strdup(DEFAULT_BUS_RIPPER_SYMNAME);
}

@ %def i_vars_setnames


@section Function @code{i_vars_freenames()}

@defun i_vars_freenames 
@end defun

<<i_vars.c : i_vars_freenames()>>=
void
i_vars_freenames()
{
  free(default_series_name);
  free(default_untitled_name);
  free(default_font_directory);
  free(default_scheme_directory);
  free(default_bitmap_directory);
  free(default_bus_ripper_symname);
}


@ %def i_vars_freenames
