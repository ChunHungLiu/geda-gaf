dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR([src/char_width.c])

dnl Initialize automake stuff
PACKAGE=geda-utils

DATADIR=gEDA

# new way of doing version
VERSION=20020512

echo Configuring utils version $VERSION

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)

dnl Create a configuration header
AM_CONFIG_HEADER(config.h)

dnl Build time sanity check...
AM_SANITY_CHECK

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
AC_PROG_MAKE_SET

AC_HEADER_SYS_WAIT
AC_HEADER_DIRENT
AC_CHECK_HEADERS(fcntl.h unistd.h string.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd strstr vsnprintf snprintf)

AC_MSG_CHECKING([for optarg in unistd.h])
AC_TRY_COMPILE(
[#include <unistd.h>],
[ char *string = optarg; int i = optind; ],
optarg_found=yes,
optarg_found=no)
AC_MSG_RESULT($optarg_found)

if test $optarg_found = yes; then
		AC_DEFINE(OPTARG_IN_UNISTD)
fi

AC_CYGWIN

if test "$CYGWIN" = "yes"; then
          AC_MSG_ERROR(Building gEDA/gaf under cygwin is not supported)       
fi

AC_MINGW32

AC_DEFINE_UNQUOTED(VERSION, "$VERSION")

# search for libgeda-config
AC_PATH_PROG(LIBGEDACONFIG, libgeda-config, no, ${PATH})

if test $LIBGEDACONFIG = "no"; then
        AC_MSG_ERROR(Cannot find libgeda-config -- be sure that libgeda is installed)
fi

LIBGEDA_CFLAGS=`$LIBGEDACONFIG --cflags`
#LIBGEDA_LDFLAGS = `$LIBGEDACONFIG --libs`

if ! test "$MINGW32" = "no" -o "$MINGW32"x = x; then
	echo Adding -liberty for MINGW32 port
	LIBERTY="$LDFLAGS -liberty"
	PATHSEP=\\\\
else
	PATHSEP=/
fi 

AC_SUBST(HOME)
AC_SUBST(VERSION)
AC_SUBST(LIBGEDA_CFLAGS)
AC_SUBST(LIBERTY)

AC_CONFIG_FILES([Makefile \
		examples/Makefile \
		src/Makefile ])
AC_OUTPUT

