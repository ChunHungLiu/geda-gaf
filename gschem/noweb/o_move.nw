@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File o_move.c,,,Top
@chapter File @file{o_move.c}

@section File header

<<o_move.c : *>>=
<<o_move.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/o_move.nw instead */

<<o_move.c : include directives>>
<<o_move.c : o_move_start()>>
<<o_move.c : o_move_end_lowlevel()>>
<<o_move.c : o_move_end()>>
<<o_move.c : o_move_return_whichone()>>
<<o_move.c : o_move_check_endpoint()>>
<<o_move.c : o_move_prep_rubberband()>>
<<o_move.c : o_move_zero_length()>>
<<o_move.c : o_move_end_rubberband()>>
<<o_move.c : o_move_stretch_rubberband()>>

@


<<o_move.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * gschem - gEDA Schematic Capture
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<o_move.c : include directives>>=
#include <config.h>

#include <stdio.h>

#include <libgeda/libgeda.h>

#include "../include/x_states.h"
#include "../include/prototype.h"
#include "../include/globals.h"

@


@section Function @code{o_move_start()}

@defun o_move_start w_current x y
@end defun

<<o_move.c : o_move_start()>>=
void o_move_start(TOPLEVEL * w_current, int x, int y)
{
  if (w_current->page_current->selection2_head->next != NULL) {

    w_current->last_drawb_mode = -1;
    w_current->event_state = MOVE;

    w_current->last_x = w_current->start_x = fix_x(w_current, x);
    w_current->last_y = w_current->start_y = fix_y(w_current, y);

    o_drawbounding(w_current, NULL,
                   w_current->page_current->selection2_head->next,
                   x_get_darkcolor(w_current->bb_color), TRUE);

    if (w_current->netconn_rubberband) {
      o_move_prep_rubberband(w_current);
    }

    w_current->inside_action = 1;
  }
}


@ %def o_move_start


@section Function @code{o_move_end_lowlevel()}

@defun o_move_end_lowlevel w_current list type diff_x diff_y screen_diff_x screen_diff_y
@end defun

<<o_move.c : o_move_end_lowlevel()>>=
#define SINGLE     0
#define COMPLEX    1

/* type can be SINGLE or COMPLEX */
/* which basically controls if this is a single object or a complex */
void
o_move_end_lowlevel(TOPLEVEL * w_current, OBJECT * list, int type,
		    int diff_x, int diff_y,
		    int screen_diff_x, int screen_diff_y)
{
  OBJECT *o_current;
  OBJECT *object;
  GList *other_objects = NULL;
  GList *connected_objects = NULL;

  o_current = list;
  while (o_current != NULL) {

    g_list_free(other_objects);
    other_objects = NULL;
    g_list_free(connected_objects);
    connected_objects = NULL;

    object = o_current;
    switch (object->type) {

      case (OBJ_NET):
        /* erase the existing object */
        o_cue_undraw(w_current, object);
        o_net_erase(w_current, object);

        if (type == SINGLE) {
          o_line_erase_grips(w_current, object);
        }

        /* save the other objects and remove object's connections */
        other_objects = s_conn_return_others(other_objects, object);
        s_conn_remove(w_current, object);

        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_net_draw_xor(w_current, screen_diff_x, screen_diff_y,
                         object);
        }

        /* do the actual translation */
        o_net_translate_world(w_current, diff_x, diff_y, object);
        s_conn_update_object(w_current, object);

        /* redraw the actual object */
        o_net_draw(w_current, object);

        /* draw the object objects */
        o_cue_undraw_list(w_current, other_objects);
        o_cue_draw_list(w_current, other_objects);

        /* get the other connected objects and redraw them */
        connected_objects =
          s_conn_return_others(connected_objects, object);
        o_cue_undraw_list(w_current, connected_objects);
        o_cue_draw_list(w_current, connected_objects);

        /* finally draw this objects cues */
        o_cue_draw_single(w_current, object);
        break;

      case (OBJ_BUS):
        /* erase the existing object */
        o_cue_undraw(w_current, object);
        o_bus_erase(w_current, object);

        if (type == SINGLE) {
          o_line_erase_grips(w_current, object);
        }

        /* save the other objects and remove object's connections */
        other_objects = s_conn_return_others(other_objects, object);
        s_conn_remove(w_current, object);

        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_bus_draw_xor(w_current, screen_diff_x, screen_diff_y,
                         object);
        }

        o_bus_translate_world(w_current, diff_x, diff_y, object);
        s_conn_update_object(w_current, object);

        /* redraw the actual object */
        o_bus_draw(w_current, object);

        /* draw the object objects */
        o_cue_undraw_list(w_current, other_objects);
        o_cue_draw_list(w_current, other_objects);

        /* get the other connected objects and redraw them */
        connected_objects =
          s_conn_return_others(connected_objects, object);
        o_cue_undraw_list(w_current, connected_objects);
        o_cue_draw_list(w_current, connected_objects);

        /* finally draw this objects cues */
        o_cue_draw_single(w_current, object);
        break;

      case (OBJ_PIN):
        /* erase the existing object */
        o_cue_undraw(w_current, object);
        o_pin_erase(w_current, object);

        if (type == SINGLE) {
          o_line_erase_grips(w_current, object);
        }

        /* save the other objects and remove object's connections */
        other_objects = s_conn_return_others(other_objects, object);
        s_conn_remove(w_current, object);

        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_pin_draw_xor(w_current, screen_diff_x, screen_diff_y,
                         object);
        }
        o_pin_translate_world(w_current, diff_x, diff_y, object);
        s_conn_update_object(w_current, object);

        /* redraw the actual object */
        o_pin_draw(w_current, object);

        /* draw the object objects */
        o_cue_undraw_list(w_current, other_objects);
        o_cue_draw_list(w_current, other_objects);

        /* get the other connected objects and redraw them */
        connected_objects =
          s_conn_return_others(connected_objects, object);
        o_cue_undraw_list(w_current, connected_objects);
        o_cue_draw_list(w_current, connected_objects);

        /* finally draw this objects cues */
        o_cue_draw_single(w_current, object);

        break;

      case (OBJ_LINE):
        o_line_erase(w_current, object);

        if (type == SINGLE) {
          o_line_erase_grips(w_current, object);
        }

        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_line_draw_xor(w_current, screen_diff_x, screen_diff_y,
                          object);
        }

        o_line_translate_world(w_current, diff_x, diff_y, object);

        o_line_draw(w_current, object);
        break;

      case (OBJ_BOX):
        o_box_erase(w_current, object);

        if (type == SINGLE) {
          o_box_erase_grips(w_current, object);
        }


        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_box_draw_xor(w_current, screen_diff_x, screen_diff_y,
                         object);
        }
        o_box_translate_world(w_current, diff_x, diff_y, object);

        o_box_draw(w_current, object);
        break;

      case (OBJ_CIRCLE):
        o_circle_erase(w_current, object);

        if (type == SINGLE) {
          o_circle_erase_grips(w_current, object);
        }


        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_circle_draw_xor(w_current, screen_diff_x, screen_diff_y,
                            object);
        }
        o_circle_translate_world(w_current, diff_x, diff_y, object);
        o_circle_draw(w_current, object);
        break;


      case (OBJ_TEXT):
        o_text_erase(w_current, object);
        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_text_draw_xor(w_current, screen_diff_x, screen_diff_y,
                          object);
        }
        o_text_translate_world(w_current, diff_x, diff_y, object);

        o_text_draw(w_current, object);
        break;


      case (OBJ_ARC):
        o_arc_erase(w_current, object);
        if (w_current->actionfeedback_mode == OUTLINE
            && type == SINGLE) {
          o_arc_draw_xor(w_current, screen_diff_x, screen_diff_y,
                         object);
        }
        o_arc_translate_world(w_current, diff_x, diff_y, object);
        o_arc_draw(w_current, object);
        break;
    }


    if (type == COMPLEX) {
      o_current = o_current->next;
    } else {
      o_current = NULL;
    }
  }


}


@ %def o_move_end_lowlevel


@section Function @code{o_move_end()}

@defun o_move_end w_current
@end defun

<<o_move.c : o_move_end()>>=
void o_move_end(TOPLEVEL * w_current)
{
  SELECTION *s_current = NULL;
  OBJECT *object;
  int diff_x, diff_y;
  int screen_diff_x, screen_diff_y;
  int lx, ly;
  int sx, sy;
  int left, top, right, bottom;

  object = o_select_return_first_object(w_current);

  if (!object) {
    /* actually this is an error condition hack */
    w_current->event_state = SELECT;
    i_update_status(w_current, _("Select Mode"));
    w_current->inside_action = 0;
    return;
  }

  screen_diff_x = w_current->last_x - w_current->start_x;
  screen_diff_y = w_current->last_y - w_current->start_y;

  SCREENtoWORLD(w_current, w_current->last_x, w_current->last_y,
                &lx, &ly);
  SCREENtoWORLD(w_current, w_current->start_x, w_current->start_y,
                &sx, &sy);

  diff_x = lx - sx;
  diff_y = ly - sy;

  if (w_current->netconn_rubberband) {
    o_move_end_rubberband(w_current, diff_x, diff_y);
  }

  /* skip over head node */
  s_current = w_current->page_current->selection2_head->next;

  while (s_current != NULL) {

    if (s_current->selected_object == NULL) {
      fprintf(stderr, _("ERROR: NULL object in o_move_end!\n"));
      exit(-1);
    }


    object = s_current->selected_object;
    switch (object->type) {
      case (OBJ_NET):
      case (OBJ_PIN):
      case (OBJ_BUS):
      case (OBJ_LINE):
      case (OBJ_BOX):
      case (OBJ_CIRCLE):
      case (OBJ_ARC):
      case (OBJ_TEXT):
        o_move_end_lowlevel(w_current, object, SINGLE, diff_x, diff_y,
                            screen_diff_x, screen_diff_y);
        break;

      case (OBJ_COMPLEX):

        if (scm_hook_empty_p(move_component_hook) == SCM_BOOL_F &&
            object != NULL) {
          scm_run_hook(move_component_hook,
                       gh_cons(g_make_attrib_smob_list
                               (w_current, object), SCM_EOL));
        }

        if (w_current->actionfeedback_mode == OUTLINE) {
          o_complex_draw_xor(w_current,
                             screen_diff_x,
                             screen_diff_y,
                             object->complex->prim_objs);
        }

        /* this next section of code is from */
        /* o_complex_world_translate_toplevel */
        object->complex->x = object->complex->x + diff_x;
        object->complex->y = object->complex->y + diff_y;

        WORLDtoSCREEN(w_current, object->complex->x,
                      object->complex->y,
                      &object->complex->screen_x,
                      &object->complex->screen_y);

        o_move_end_lowlevel(w_current, object->complex->prim_objs,
                            COMPLEX, diff_x, diff_y,
                            screen_diff_x, screen_diff_y);


        get_complex_bounds(w_current, object->complex->prim_objs,
                           &left, &top, &right, &bottom);

        object->left = left;
        object->top = top;
        object->right = right;
        object->bottom = bottom;

        break;
    }

    s_current = s_current->next;
  }

  /* erase the bounding box */
  if (w_current->actionfeedback_mode == BOUNDINGBOX) {
    o_drawbounding(w_current, NULL,
                   w_current->page_current->selection2_head->next,
                   x_get_darkcolor(w_current->bb_color), FALSE);
  }

  w_current->page_current->CHANGED = 1;
  /*  o_redraw(w_current, w_current->page_current->object_head); */
  o_undo_savestate(w_current, UNDO_ALL);
}


@ %def o_move_end


@section Function @code{o_move_return_whichone()}

@defun o_move_return_whichone object x y
@end defun

<<o_move.c : o_move_return_whichone()>>=
int o_move_return_whichone(OBJECT * object, int x, int y)
{
  if (object->line->x[0] == x && object->line->y[0] == y) {
    return (0);
  }

  if (object->line->x[1] == x && object->line->y[1] == y) {
    return (1);
  }

  fprintf(stderr,
          _("DOH! tried to find the whichone, but didn't find it!\n"));
  return (-1);
}


@ %def o_move_return_whichone


@section Function @code{o_move_check_endpoint()}

@defun o_move_check_endpoint w_current object
@end defun

<<o_move.c : o_move_check_endpoint()>>=
void o_move_check_endpoint(TOPLEVEL * w_current, OBJECT * object)
{
  GList *cl_current;
  CONN *c_current;
  int whichone;

  if (!object)
  return;

  if (object->type != OBJ_NET && object->type != OBJ_PIN &&
      object->type != OBJ_BUS) {
    fprintf(stderr,
            _("Got a non line object in o_move_check_endpoint\n"));
    return;
  }

  cl_current = object->conn_list;
  while (cl_current != NULL) {

    c_current = (CONN *) cl_current->data;

    if (c_current->other_object != NULL) {

      /* really make sure that the object is not selected */
      if (c_current->other_object->saved_color == -1 &&
          c_current->other_object->selected == FALSE) {

        if (c_current->type == CONN_ENDPOINT ||
            (c_current->type == CONN_MIDPOINT &&
             c_current->other_whichone != -1)) {

          whichone =
            o_move_return_whichone(c_current->other_object,
                                   c_current->x, c_current->y);

#if DEBUG
          printf
            ("FOUND: %s type: %d, whichone: %d, x,y: %d %d\n",
             c_current->other_object->name, c_current->type,
             whichone, c_current->x, c_current->y);
#endif

#if DEBUG
          printf("other x,y: %d %d\n", c_current->x,
                 c_current->y);
          printf("type: %d return: %d real: [ %d %d ]\n",
                 c_current->type, whichone, c_current->whichone,
                 c_current->other_whichone);
#endif

          if (whichone >= 0 && whichone <= 1) {
            w_current->page_current->stretch_tail =
              s_stretch_add(w_current->page_current->
                            stretch_head,
                            c_current->other_object,
                            c_current, whichone);
          }

        }
      }
    }
    cl_current = cl_current->next;
  }

}


@ %def o_move_check_endpoint


@section Function @code{o_move_prep_rubberband()}

@defun o_move_prep_rubberband w_current
@end defun

<<o_move.c : o_move_prep_rubberband()>>=
void o_move_prep_rubberband(TOPLEVEL * w_current)
{
  SELECTION *s_current;
  OBJECT *object;
  OBJECT *o_current;

  s_stretch_remove_most(w_current,
                        w_current->page_current->stretch_head);
  w_current->page_current->stretch_tail =
  w_current->page_current->stretch_head;

#if DEBUG
  printf("\n\n\n");
  s_stretch_print_all(w_current->page_current->stretch_head);
  printf("\n\n\n");
#endif

  /* skip over head */
  s_current = w_current->page_current->selection2_head->next;
  while (s_current != NULL) {
    object = s_current->selected_object;
    if (object) {
      switch (object->type) {
        case (OBJ_NET):
        case (OBJ_PIN):
        case (OBJ_BUS):
          o_move_check_endpoint(w_current, object);
          break;

        case (OBJ_COMPLEX):
          o_current = object->complex->prim_objs;
          while (o_current != NULL) {

            if (o_current->type == OBJ_PIN) {
              o_move_check_endpoint(w_current, o_current);
            }

            o_current = o_current->next;
          }

          break;

      }
    }
    s_current = s_current->next;
  }

#if DEBUG
  printf("\n\n\n\nfinished building scretch list:\n");
  s_stretch_print_all(w_current->page_current->stretch_head);
#endif
}


@ %def o_move_prep_rubberband


@section Function @code{o_move_zero_length()}

@defun o_move_zero_length object
@end defun

<<o_move.c : o_move_zero_length()>>=
int o_move_zero_length(OBJECT * object)
{
#if DEBUG
  printf("x: %d %d y: %d %d\n",
         object->line->x[0], object->line->x[1],
         object->line->y[0], object->line->y[1]);
#endif

  if (object->line->x[0] == object->line->x[1] &&
      object->line->y[0] == object->line->y[1]) {
    return TRUE;
  } else {
    return FALSE;
  }
}


@ %def o_move_zero_length


@section Function @code{o_move_end_rubberband()}

@defun o_move_end_rubberband w_current world_diff_x world_diff_y
@end defun

<<o_move.c : o_move_end_rubberband()>>=
void
o_move_end_rubberband(TOPLEVEL * w_current, int world_diff_x,
		      int world_diff_y)
{
  STRETCH *s_current;
  GList *other_objects = NULL;
  GList *connected_objects = NULL;
  OBJECT *object;
  int x, y;
  int whichone;

  /* skip over head */
  s_current = w_current->page_current->stretch_head->next;


  while (s_current != NULL) {

    g_list_free(other_objects);
    other_objects = NULL;
    g_list_free(connected_objects);
    connected_objects = NULL;

    object = s_current->object;
    if (object) {
      whichone = s_current->whichone;

      switch (object->type) {
        case (OBJ_NET):
          o_cue_undraw(w_current, object);
          o_net_erase(w_current, object);
          o_line_erase_grips(w_current, object);

          /* save the other objects and remove object's connections */
          other_objects =
            s_conn_return_others(other_objects, object);
          s_conn_remove(w_current, object);

          x = object->line->x[whichone];
          y = object->line->y[whichone];

#if DEBUG
          printf("OLD: %d, %d\n", x, y);
          printf("diff: %d, %d\n", world_diff_x, world_diff_y);
#endif

          x = x + world_diff_x;
          y = y + world_diff_y;

#if DEBUG
          printf("NEW: %d, %d\n", x, y);
#endif

          object->line->x[whichone] = x;
          object->line->y[whichone] = y;


          if (o_move_zero_length(object)) {
            o_delete_net(w_current, object);
          } else {
            o_net_recalc(w_current, object);
            s_tile_update_object(w_current, object);

            s_conn_update_object(w_current, object);
            o_cue_undraw_list(w_current, other_objects);
            o_cue_draw_list(w_current, other_objects);
            connected_objects =
              s_conn_return_others(connected_objects, object);
            o_cue_undraw_list(w_current, connected_objects);
            o_cue_draw_list(w_current, connected_objects);
          }

          break;

        case (OBJ_PIN):

          /* not valid to do with pins */

          break;

        case (OBJ_BUS):
          o_cue_undraw(w_current, object);
          o_bus_erase(w_current, object);
          o_line_erase_grips(w_current, object);

          /* save the other objects and remove object's connections */
          other_objects =
            s_conn_return_others(other_objects, object);
          s_conn_remove(w_current, object);

          x = object->line->x[whichone];
          y = object->line->y[whichone];

#if DEBUG
          printf("OLD: %d, %d\n", x, y);
          printf("diff: %d, %d\n", world_diff_x, world_diff_y);
#endif
          x = x + world_diff_x;
          y = y + world_diff_y;

#if DEBUG
          printf("NEW: %d, %d\n", x, y);
#endif
          object->line->x[whichone] = x;
          object->line->y[whichone] = y;

          if (o_move_zero_length(object)) {
            o_delete_bus(w_current, object);
          } else {
            o_bus_recalc(w_current, object);
            s_tile_update_object(w_current, object);

            s_conn_update_object(w_current, object);
            o_cue_undraw_list(w_current, other_objects);
            o_cue_draw_list(w_current, other_objects);
            connected_objects =
              s_conn_return_others(connected_objects, object);
            o_cue_undraw_list(w_current, connected_objects);
            o_cue_draw_list(w_current, connected_objects);
          }

          break;
      }
    }

    s_current = s_current->next;
  }
}


@ %def o_move_end_rubberband


@section Function @code{o_move_stretch_rubberband()}

@defun o_move_stretch_rubberband w_current
@end defun

<<o_move.c : o_move_stretch_rubberband()>>=
void o_move_stretch_rubberband(TOPLEVEL * w_current)
{

  STRETCH *s_current;
  OBJECT *object;
  int diff_x, diff_y;
  int whichone;

  diff_x = w_current->last_x - w_current->start_x;
  diff_y = w_current->last_y - w_current->start_y;


  /* skip over head */
  s_current = w_current->page_current->stretch_head->next;
  while (s_current != NULL) {

    object = s_current->object;
    if (object) {
      whichone = s_current->whichone;
      switch (object->type) {
        case (OBJ_NET):
          o_net_draw_xor_single(w_current,
                                diff_x, diff_y, whichone, object);
          break;

        case (OBJ_BUS):
          o_bus_draw_xor_single(w_current,
                                diff_x, diff_y, whichone, object);
          break;
      }
    }
    s_current = s_current->next;
  }
}


@ %def o_move_stretch_rubberband
