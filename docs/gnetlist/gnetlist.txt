
gEDA: gnetlist
User Guide

Written by: Ales Hvezda
-------------------------------------------------------------------------

Contents:

	1. Introduction
	2. Overview
	3. Installation
	4. Running gnetlist
	5. Schematic / symbol requirements
	6. Hierarchy Support
	7. Specific backend info
	8. Scheme backend API
	9. Misc issues



1. Introduction

	This document describes how to use gnetlist.  This document and
gnetlist in general are pretty ALPHA, so keep that in mind as you use it
to generate netlists.  As all engineers know, it is very important
that you do not blindly use tools assuming that they will always create
correct output.  gnetlist is certainly no exception to this rule.  It is
very important that you verify *every* netlists you create.  As with
most programs (including all the programs in gEDA), gnetlist comes
with NO WARRANTY.  Blah, I hate having to say that, but I'm hoping that
this warning will keep the user from assuming that gnetlist generates
perfect netlists.

	This document is very rough, so please e-mail all corrections
to ahvezda@geda.seul.org.  Thanks!


2. Overview

	gnetlist is the gEDA's project netlister.  It takes as inputs
schematic files and produces a netlist.  A netlist is a textual
representation of a schematic.	This textual representation has all
of the connections between devices completely resolved.  This means
that all the connections associated with a net are grouped together.
The netlister also handles hierarchies of schematics.

	gnetlist has a very flexible architecture.  The main program,
which is written in C, reads in a schematic (using routines from
libgeda) and creates an internal representation of the schematic data.
This internal representation is then manipulated by a backend which
is responsible for writing the various netlist formats.   The backend
for each netlist format is written in scheme (specifically Guile).
This architecture not allows for an infinite number of netlist formats,
but also allows the netlister to generate other reports (like bill of
material lists)

	As of 20001006 gnetlist has scheme backends to support the
following netlist formats:

	1) PCB & PCBboard - UNIX PCB netlist format. 
	2) Allegro netlist format
	3) BAE netlist format
	4) BOM & BOM2 - Bill of Material generators
	5) DRC - Start of a design rule checker 
	6) gEDA - the native format of gEDA, mainly used for testing 
	7) Gossip netlist format
	8) PADS netlist format
	9) ProtelII netlist format
	10) Spice compatible netlist format
	11) Tango netlist format
	12) Verilog code
	13) VHDL code
	14) VIPEC netlist format
 

	This list is constantly growing.  Several lacking features
(as of 20001006) are: no support for buses, error detection and reporting
is fairly limited, and ... (many more).



3. Installation

	Hopefully by now you have already installed gnetlist on your
machine.  This document does not cover installation.  You can verify
the installation by running:

	libgeda-config --version
	gesym-config --version
	which gnetlist
	ldd `which gnetlist`

	The first two should return the version of the installed tools
(libgeda and the symbol library) and the next command should return
the path to the gnetlist binary.  The final command (only on GNU/Linux
systems) will return which libraries are linked to gnetlist; all of the
request libraries must be found for gnetlist to run.  If these commands
do not return the expected results, then most likely the gEDA tools are
not installed properly.  Please see the appropriate INSTALL docs (which
came with the distribution) for more info on installing the gEDA tools.



4. Running gnetlist

	It is very easy to run gnetlist.  gnetlist is a pure command 
line interface so there is no pesky GUI to get in the way :-)

	For a list of command line arguments please run:

	gnetlist -h

	You need to specify the following two parameters to run gnetlists: 

-g proc		(this specifies which backend to run against the schematics)
filename.sch	(this specifies the schematic files)

	You can specify multiple schematics on the command line.  The 
default filename for the generated netlist goes into "output.net"  You
can change this default location by using the -o filename option.

	A few examples on running gnetlist:

	gnetlist -g geda -o stack.net stack_1.sch 

(output netlist (in stack.net) for stack_1.sch using the gEDA native
format)

	There are also a few debugging flags.  The first one is the
-v flag which enables verbose mode.  Verbose mode outputs a whole bunch
of information on what gnetlist is doing as well a dump of the internal
representation.  The -i flag which puts gnetlist into a interactive mode
is very useful in debugging scheme backends and typically is not used
by the end user.



5. Schematic / symbol requirements

	This section describes what schematics/symbols need to have to
be usable with gnetlist.  Basically these requirements consist of
attribute specification.  Attributes are used through out the gEDA
system to represent information.  Attributes are the only way of adding
information to components, nets, pins, etc...

		

