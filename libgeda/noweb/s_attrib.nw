@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File s_attrib.c,,,Top
@chapter File @file{s_attrib.c}

@section File header

<<s_attrib.c : *>>=
<<s_attrib.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/s_attrib.nw instead */

<<s_attrib.c : include directives>>
<<s_attrib.c : macro>>
<<s_attrib.c : global variables>>
<<s_attrib.c : s_attrib_add_entry()>>
<<s_attrib.c : s_attrib_print()>>
<<s_attrib.c : s_attrib_uniq()>>
<<s_attrib.c : s_attrib_free()>>
<<s_attrib.c : s_attrib_init()>>
<<s_attrib.c : s_attrib_get()>>

@


<<s_attrib.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * libgeda - gEDA's library
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<s_attrib.c : include directives>>=
#include <config.h>

#include <stdio.h>
#include <stdlib.h> 
#include <sys/types.h>

#include <gtk/gtk.h>
#include <gdk/gdk.h>
#include <gdk/gdkx.h>

#include <guile/gh.h>

#include "defines.h"
#include "struct.h"
#include "globals.h"

#include "../include/prototype.h"

@


<<s_attrib.c : macro>>=
#define MAX_ATTRIBS	128

@ %def MAX_ATTRIBS


<<s_attrib.c : global variables>>=
struct st_attrib_names {
	char *attrib_name;
};

static int attrib_index=0;

/* and eventually make this unlimited */
/* hack hack */
static struct st_attrib_names attrib[MAX_ATTRIBS];

@ %def attrib_index st_attrib_names


@section Function @code{s_attrib_add_entry()}

@defun s_attrib_add_entry new_attrib
@end defun

<<s_attrib.c : s_attrib_add_entry()>>=
int 
s_attrib_add_entry(char *new_attrib) 
{
  if (new_attrib == NULL) {
    return(-1); 
  }

  if (attrib_index >= MAX_ATTRIBS) {
    return(-1); 
  }
	
  attrib[attrib_index].attrib_name = (char *) malloc(sizeof(char)*strlen(new_attrib)+1);

  strcpy(attrib[attrib_index].attrib_name, new_attrib);

  attrib_index++;
  return(attrib_index);
}


@ %def s_attrib_add_entry


@section Function @code{s_attrib_print()}

@defun s_attrib_print 
@end defun

<<s_attrib.c : s_attrib_print()>>=
void
s_attrib_print()
{
  int i;

  for (i = 0; i < attrib_index; i++) {
    printf("%s\n", attrib[i].attrib_name);
  }
}


@ %def s_attrib_print


@section Function @code{s_attrib_uniq()}

@defun s_attrib_uniq name
@end defun

<<s_attrib.c : s_attrib_uniq()>>=
/* true for uniqueness, zero for duplication */
int
s_attrib_uniq(char *name)
{
  int i;

  for (i = 0; i < attrib_index; i++) {
    if (strcmp(attrib[i].attrib_name, name) == 0) {
      return(0);
    }
  }

  return(1);
}


@ %def s_attrib_uniq


@section Function @code{s_attrib_free()}

@defun s_attrib_free 
@end defun

<<s_attrib.c : s_attrib_free()>>=
void
s_attrib_free()
{
	int i;

	for (i = 0; i < attrib_index; i++) {
		if (attrib[i].attrib_name)
               		free(attrib[i].attrib_name);
	}

	attrib_index=0;
}


@ %def s_attrib_free


@section Function @code{s_attrib_init()}

@defun s_attrib_init 
@end defun

<<s_attrib.c : s_attrib_init()>>=
void
s_attrib_init()
{
  int i;
  for (i = 0; i < MAX_ATTRIBS; i++) {
    attrib[i].attrib_name = NULL;	
  } 
}


@ %def s_attrib_init


@section Function @code{s_attrib_get()}

@defun s_attrib_get counter
@end defun

<<s_attrib.c : s_attrib_get()>>=
char *
s_attrib_get(int counter)
{
  if (counter < attrib_index) {
    return(attrib[counter].attrib_name);
  } else {
    return(NULL);
  }

  return(NULL);
}


@ %def s_attrib_get

