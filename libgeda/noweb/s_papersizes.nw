@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File s_papersizes.c,,,Top
@chapter File @file{s_papersizes.c}

@section File header

<<s_papersizes.c : *>>=
<<s_papersizes.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/s_papersizes.nw instead */

<<s_papersizes.c : include directives>>
<<s_papersizes.c : global variables>>
<<s_papersizes.c : s_papersizes_add_entry()>>
<<s_papersizes.c : s_papersizes_print()>>
<<s_papersizes.c : s_papersizes_uniq()>>
<<s_papersizes.c : s_papersizes_free()>>
<<s_papersizes.c : s_papersizes_init()>>
<<s_papersizes.c : s_papersizes_get()>>
<<s_papersizes.c : s_papersizes_get_size()>>

@


<<s_papersizes.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * libgeda - gEDA's library
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<s_papersizes.c : include directives>>=
#include <config.h>

#include <stdio.h>
#include <sys/types.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h> 
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif

#include <gtk/gtk.h>
#include <guile/gh.h>

#include "defines.h"
#include "struct.h"
#include "globals.h"

#include "../include/prototype.h"

@


<<s_papersizes.c : global variables>>=
struct st_papersizes_names {
	char *papersize_name;
	int width, height;
};

static int papersizes_index=0;

#define MAX_PAGESIZES	60

/* and eventually make this unlimited */
/* hack hack */
static struct st_papersizes_names papersizes[MAX_PAGESIZES];

@ %def papersizes_index papersizes


@section Function @code{s_papersizes_add_entry()}

@defun s_papersizes_add_entry new_papersize width height
@end defun

<<s_papersizes.c : s_papersizes_add_entry()>>=
/* width and height in portrait mode */
int
s_papersizes_add_entry(char *new_papersize, int width, int height) 
{
  if (new_papersize == NULL) {
    return(-1); 
  }

  if (papersizes_index >= MAX_PAGESIZES) {
    return(-1); 
  }
	
  papersizes[papersizes_index].papersize_name = (char *) malloc(sizeof(char)*strlen(new_papersize)+1);

  strcpy(papersizes[papersizes_index].papersize_name, new_papersize);

  papersizes[papersizes_index].width = width;
  papersizes[papersizes_index].height = height;

  papersizes_index++;
  return(papersizes_index);
}


@ %def s_papersizes_add_entry


@section Function @code{s_papersizes_print()}

@defun s_papersizes_print 
@end defun

<<s_papersizes.c : s_papersizes_print()>>=
void
s_papersizes_print()
{
  int i;

  for (i = 0; i < papersizes_index; i++) {
    printf("%s\n", papersizes[i].papersize_name);
  }
}


@ %def s_papersizes_print


@section Function @code{s_papersizes_uniq()}

@defun s_papersizes_uniq name
@end defun

<<s_papersizes.c : s_papersizes_uniq()>>=
/* true for uniqueness, zero for duplication */
int
s_papersizes_uniq(char *name)
{
  int i;

  for (i = 0; i < papersizes_index; i++) {
    if (strcmp(papersizes[i].papersize_name, name) == 0) {
      return(0);
    }
  }

  return(1);
}


@ %def s_papersizes_uniq


@section Function @code{s_papersizes_free()}

@defun s_papersizes_free 
@end defun

<<s_papersizes.c : s_papersizes_free()>>=
void
s_papersizes_free()
{
	int i;

	for (i = 0; i < papersizes_index; i++) {
		if (papersizes[i].papersize_name)
               		free(papersizes[i].papersize_name);
	}

	papersizes_index=0;
}


@ %def s_papersizes_free


@section Function @code{s_papersizes_init()}

@defun s_papersizes_init 
@end defun

<<s_papersizes.c : s_papersizes_init()>>=
void
s_papersizes_init()
{
  int i;
  for (i = 0; i < MAX_PAGESIZES; i++) {
    papersizes[i].papersize_name = NULL;	
  } 
}


@ %def s_papersizes_init


@section Function @code{s_papersizes_get()}

@defun s_papersizes_get counter
@end defun

<<s_papersizes.c : s_papersizes_get()>>=
char *
s_papersizes_get(int counter)
{
  if (counter < papersizes_index) {
    return(papersizes[counter].papersize_name);
  } else {
    return(NULL);
  }

  return(NULL);
}


@ %def s_papersizes_get


@section Function @code{s_papersizes_get_size()}

@defun s_papersizes_get_size string width height
@end defun

<<s_papersizes.c : s_papersizes_get_size()>>=
void
s_papersizes_get_size(char *string, int *width, int *height) 
{
  int i;

  for (i = 0; i < papersizes_index; i++) {
    if (strcmp(papersizes[i].papersize_name, string) == 0) {
      *width = papersizes[i].width;
      *height = papersizes[i].height;
      return;
    }
  }

  *width = 0;
  *height = 0;
}


@ %def s_papersizes_get_size

