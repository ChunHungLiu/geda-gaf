dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR([noweb/gschem.nw])

dnl Initialize automake stuff
PACKAGE=geda-gschem

DATADIR=gEDA

# new way of doing version
VERSION=20020527

echo Configuring gschem version $VERSION

dnl --disable-strokes : turn off stroke support
AC_ARG_ENABLE(strokes,
    [  --disable-strokes       Disable stroke support (don't use LibStroke at all)],
    [
	if test $enableval = "no"; then
		no_strokes=yes
	fi
    ])

dnl --disable-gdgeda : turn off libgdgeda support
AC_ARG_ENABLE(gdgeda,
    [  --disable-gdgeda        Disable libgdgeda support (don't use libgdgeda at all)],
    [
	if test $enableval = "no"; then
		no_gdgeda=yes
	fi
    ])

dnl --enable-debug : turn on debugging support (normally off)
AC_ARG_ENABLE(debug,
    [  --enable-debug          Enable debugging support],
    [
	if test $enableval = "no"; then
        	debug=yes
	fi
    ])

dnl Change default location of gtk-config
AC_ARG_WITH(gtk-config, [  --with-gtk-config=path  Change where gtk-config is located], [opt_gtkconfig=$withval])

dnl Change default location for rc files
AC_ARG_WITH(rcdir, [  --with-rcdir=path       Change where the system-*rc files are installed], [opt_rcdir=$withval])

dnl Initialize automake stuff
dnl AM_INIT_AUTOMAKE($PACKAGE, $GEDA_VER_MAJOR.$GEDA_VER_MINOR.$GEDA_VER_MICRO, no-define)
AM_INIT_AUTOMAKE($PACKAGE, $VERSION)

dnl Create a configuration header
AM_CONFIG_HEADER(config.h)

dnl Build time sanity check...
AM_SANITY_CHECK

dnl Initialize maintainer mode
AM_MAINTAINER_MODE

dnl Checks for programs.
AC_PROG_CC
dnl AC_PROG_LEX
dnl AC_PROG_LEX()
AC_PROG_MAKE_SET

AC_CYGWIN

if test "$CYGWIN" = "yes"; then
          AC_MSG_ERROR(Building gEDA/gaf under cygwin is not supported)       
fi

AC_MINGW32

dnl Guile stuff
GUILE_FLAGS

dnl Check if scm_run_hook are defined 
AC_CHECK_LIB(guile, scm_run_hook,,
 	AC_MSG_ERROR(**Upgrade Guile**  At least version >= 1.3.2),
	$GUILE_LDFLAGS)

dnl Restore LIBS. Apperantly AC_CHECK_LIB destroys it.
LIBS="$ac_save_LIBS"

dnl Check if scm_hook_empty_p are defined 
AC_CHECK_LIB(guile, scm_hook_empty_p,,
 	AC_MSG_ERROR(**Upgrade Guile**  At least version >= 1.3.2),
	$GUILE_LDFLAGS)

dnl Restore LIBS. Apperantly AC_CHECK_LIB destroys it.
LIBS="$ac_save_LIBS"

saved_cflags="$CFLAGS"
saved_ldflags="$LDFLAGS"

dnl Checks for header files.
AC_PATH_X
AC_PATH_XTRA

CFLAGS="$X_CFLAGS $CFLAGS"
LDFLAGS="$X_LDFLAGS $X_LIBS $LDFLAGS"
X_EXTRA_LIBS="$X_EXTRA_LIBS -lX11 -lm"

dnl Checks for X libraries.
AC_CHECK_LIB(X11, XOpenDisplay, X_LIBS="-lX11", X_LIBS=no, $X_EXTRA_LIBS)
AC_CHECK_LIB(Xext, XShmAttach, X_LIBS="-lXext $X_LIBS", X_EXT=no, $X_EXTRA_LIBS)
dnl AC_CHECK_LIB(Xext, XShmAttach, X_LIBS="-lXext $X_LIBS", XEXT=no, $X_EXTRA_LIBS)

if test "$MINGW32" = "no" -o "$MINGW32"x = x; then
        if test "$X_LIBS" = no; then
          AC_MSG_ERROR(Cannot find -lX11 library)
        fi
else
        echo X11 not required for MINGW32 port
fi

dnl Checking for rint in math library
AC_CHECK_LIB(m, rint, AC_DEFINE(HAS_RINT), no_RINT="yes")

dnl Checking for dynamic lib
AC_CHECK_LIB(dl, dlopen, DL_LIB="-ldl", DL_LIB="")

if eval "test x$opt_gtkconfig != x" ; then

	if test ! -r "$opt_gtkconfig"; then

		AC_MSG_ERROR(Cannot find $opt_gtkconfig -- be sure that this pathname is correct)

	else
		GTK_CONFIG=$opt_gtkconfig
	fi
else
        AM_PATH_GTK(1.2.3,,AC_MSG_ERROR([*** GTK+ >= 1.2.3 not installed - please install first ***]))
fi

if test $GTK_CONFIG = "no"; then
	AC_MSG_ERROR(Cannot find gtk-config -- be sure that gtk >= 0.99.7 is installed)
fi

        gtk_ldflags="`$GTK_CONFIG --libs`"
        gtk_cflags="`$GTK_CONFIG --cflags`"

# search for libgdgeda-config
AC_PATH_PROG(LIBGDGEDACONFIG, libgdgeda-config, no, ${PATH})

if test $LIBGDGEDACONFIG = "no" -o no_gdgeda = yes; then
	 GDGEDA_LIB=""
         libgdgeda_ldflags=""
         libgdgeda_cflags=""
else
         libgdgeda_ldflags=`$LIBGDGEDACONFIG --libs`
         libgdgeda_cflags=`$LIBGDGEDACONFIG --cflags`
         GD_EXTRA="$libgdgeda_cflags $libgdgeda_ldflags -lm"
         X_CFLAGS="$libgdgeda_cflags"

         AC_CHECK_LIB(z, uncompress, Z_LIB="-lz", Z_LIB=no)
         if test $Z_LIB = no; then
	 	AC_MSG_ERROR(Cannot find libz (zlib), be sure to install zlib; it is required for libgdgeda)
	 else

		PNG_EXTRA="-lz -lm"
                AC_CHECK_LIB(png, png_read_png, PNG_LIB="-lpng", PNG_LIB=no, $PNG_EXTRA)

                if test $PNG_LIB = no; then
                        AC_MSG_ERROR(Cannot find libpng, be sure to install png; it is required for libgdgeda)
                else
			AC_CHECK_LIB(gdgeda, gdImageColorAllocate, GDGEDA_LIB="-lgdgeda", GDGEDA_LIB=no, $GD_EXTRA)

			if test $GDGEDA_LIB = no; then
			        GDGEDA_LIB=""
		         	libgdgeda_ldflags=""
         			libgdgeda_cflags=""
			else
		                AC_DEFINE(HAS_LIBZ)
                		AC_DEFINE(HAS_LIBPNG)
		                AC_DEFINE(HAS_LIBGDGEDA)
		        fi
		fi
	fi
fi

# search for gtkextra-config
AC_PATH_PROG(GTKEXTRACONFIG, gtkextra-config, no, ${PATH})

if test $GTKEXTRACONFIG = "no"; then
	gtkextra_ldflags=""
	gtkextra_cflags=""
else
	gtkextra_ldflags=`$GTKEXTRACONFIG --libs`
	gtkextra_cflags=`$GTKEXTRACONFIG --cflags`
	GTK_EXTRA="$gtk_cflags $gtkextra_cflags $gtkextra_ldflags $gtk_ldflags -lm"
	AC_CHECK_LIB(gtkextra, gtk_sheet_new, GTKEXTRA_LIB="-lgtkextra", GTKEXTRA_LIB=no, $GTK_EXTRA)
	if test $GTKEXTRA_LIB = "no"; then
		AC_MSG_ERROR(gtkextra library improperly installed)
	else	
		AC_DEFINE(HAS_LIBGTKEXTRA)
	fi
fi

# search for libgeda-config
AC_PATH_PROG(LIBGEDACONFIG, libgeda-config, no, ${PATH})

if test $LIBGEDACONFIG = "no"; then
	AC_MSG_ERROR(Cannot find libgeda-config -- be sure that libgeda is installed)
fi


libgeda_version=`$LIBGEDACONFIG --version`
if test $libgeda_version != $VERSION; then
	AC_MSG_ERROR(Found a different version of libgeda-config: $LIBGEDACONFIG -- Make sure your PATH variable is correct)
fi


# search for gesym-config
AC_PATH_PROG(GESYMCONFIG, gesym-config, no, ${PATH})

if test $GESYMCONFIG = "no"; then
   	  AC_MSG_ERROR(Cannot find gesym-config -- be sure that the symbols are installed)
	fi

gesym_version=`$GESYMCONFIG --version`
if test $gesym_version != $VERSION; then                                                AC_MSG_ERROR(Found a different version of gesym-config: $GESYMCONFIG -- Make sure your PATH variable is correct)
fi

AC_CHECK_LIB(stroke, stroke_init, STROKE_LIB="-lstroke", STROKE_LIB=no)

if test $STROKE_LIB = no; then
	STROKE_LIB=""
else 
	if test "$no_strokes" = "yes"; then
		echo found libstroke, but disabling strokes
		STROKE_LIB=""
	else 
		AC_DEFINE(HAS_LIBSTROKE)
	fi
fi

# here is where the final X ld/c flags get set
LDEXTRA=
CFEXTRA=
GTK=
GDK=
GLIB=
X_LDFLAGS="`$LIBGEDACONFIG --libs` $libgdgeda_ldflags $gtkextra_ldflags $gtk_ldflags"
X_CFLAGS="$gtk_cflags $libgdgeda_cflags $gtkextra_cflags `$LIBGEDACONFIG --cflags`"
gtkversion=`$GTK_CONFIG --version | cut -d. -f1,2`

AC_DEFINE_UNQUOTED(GTKVERSION, "$gtkversion")

dnl old way of doing this, see if new way works 
dnl CFLAGS="$CFLAGS $CFEXTRA `$GTK_CONFIG --cflags`"

CFLAGS="`$GTK_CONFIG --cflags` $CFLAGS $CFEXTRA"
LDFLAGS="$LDEXTRA `$GTK_CONFIG --libs` $LDFLAGS"

AC_MSG_CHECKING([for the rest of gtk])
AC_TRY_COMPILE(
[#include <gtk/gtk.h>],
[GtkArgSetFunc arg_set_func;],
gtk_found=yes,
gtk_found=no)
AC_MSG_RESULT($gtk_found)

if test $gtk_found = no; then
	AC_MSG_ERROR(Cannot include/link gtk/gdk/glib--check CFLAGS/LDFLAGS)
fi

LDFLAGS="$saved_ldflags $LDEXTRA"
CFLAGS="$saved_cflags $CFEXTRA"

if ! test "$MINGW32" = "no" -o "$MINGW32"x = x; then
	echo Including -fnative-struct in CFLAGS for MINGW32 port
        echo Include -lregex in LDFLAGS for MINGW32 port
	CFLAGS="$CFLAGS -fnative-struct"
        X_LDFLAGS="-lregex -liberty $X_LDFLAGS"
	PATHSEP=\\\\
	OTHERPATHSEP=/
else
	PATHSEP=/
	OTHERPATHSEP=\\\\
fi

if test "$debug" = "yes"; then
	CFLAGS="$CFLAGS -g"
fi


# Tangling is required if there is no C source files in the src/ 
# directory. Therefore they need to be extracted from the documented
# sources in noweb/ either with notangle or notangle_guile.scm.
#
# notangle is the utility that comes with the noweb package.
# notangle_guile.scm is a script that act the same as notangle
# but only require a guile interpreter with built-in module regex
# and getopt-long

# search for notangle
AC_PATH_PROG(NOTANGLE, notangle, no, ${PATH})
cfiles=`\ls -1 src/gschem.c 2> /dev/null`
exit_status=$?

if test "$NOTANGLE" = "no" -a "$exit_status" = "1"; then
	# notangle not found, and no C sources in src 
	# need notangle_guile.scm
	echo "** Cannot find notangle (part of noweb) : using notangle_guile.scm instead **"
	
	# find the guile interpreter
	AC_PATH_PROG(GUILEINTERP, guile, no, ${PATH})
	if test "$GUILEINTERP" = "no"; then
	   AC_MSG_ERROR(guile interpreter is required)
	fi
  
	# check (ice-9 getopt-long) module in guile
	AC_MSG_CHECKING([for getopt-long module in guile])
	guilegetopt=`$GUILEINTERP -c  '(use-modules (ice-9 getopt-long))' 2> /dev/null`
	exit_status=$?
	if test "$exit_status" = "1"; then
	   AC_MSG_RESULT([no])
	   echo "no support for getopt-long module in guile interpreter"
	   AC_MSG_ERROR(this module is required by notangle_guile.scm but is not available in the interpreter)
	fi
	AC_MSG_RESULT([yes])

	# check (ice-9 regex) module in guile
	AC_MSG_CHECKING([for regex module in guile])
	guileregex=`$GUILEINTERP -c  '(use-modules (ice-9 regex))' 2> /dev/null`
	exit_status=$?
	if test ! "$exit_status" = "0"; then
	   AC_MSG_RESULT([no])
	   echo "no support for regex module in guile interpreter"
	   AC_MSG_ERROR(this module is required by notangle_guile.scm but is not available in the interpreter)
	fi
	AC_MSG_RESULT([yes])

	# set NOTANGLE and NOTANGLEROOT to use notangle_guile.scm
	# as the result of the previous tests
	#  - NOTANGLE is the relative pathname to script from the source dir
	#  - NOTANGLEROOT is the option to give the root code chunk name
	#  - NOTANGLEFLAGS are other flags to notangle_guile.scm
	NOTANGLE="../scripts/notangle_guile.scm"
	NOTANGLEROOT="--rootname="
	NOTANGLEFLAGS=""

	echo "--            notangle_guile.scm should work fine on this system           --"

else
	# NOTANGLE has been set by AC_PATH_PROG above
	NOTANGLEROOT="-R"
	NOTANGLEFLAGS="-L"

fi


# Weaving is extracting the documentation from the noweb files.
# The noweb package provides noweave to weave these files.
# 
# The documentation is here written in Texinfo. A backend is 
# provided in scripts to format the code chunks in Texinfo.
#
# The noweave program is therefore required to produce the 
# documentation but building documentation is optionnal.
#

# search for noweave
AC_PATH_PROG(NOWEAVE, noweave, no, ${PATH})
# search for AWK
#  the noweb texinfo backend is based on awk. If awk is not available,
#  the backend will not work, and therefore it disables the 
#  documentation creation.
AC_PROG_AWK

if test "$NOWEAVE" = "no" -o "$AWK" = "no"; then 
	# noweave is not available on the system
        echo "** Cannot find noweave (part of noweb)! **"
	echo "**   Documentation creation disabled    **"
	NOWEAVE=echo

	# prevent from weaving the nw files
	# but does not prevent from processing gschemdoc
	builddoc=false

else 
	# noweave is available on the system.
	# now checking if the tools for Texinfo files processing
	# is installed.
	# The docs can be either processed to produce dvi, html or info
	# with texi2dvi, texi2html or makeinfo respectively
	# Note : these tests on makeinfo and texi2dvi are no more 
	#        needed as automake makes them for us

	# enable the weaving of the nw files to get documentation
	builddoc=true

fi

# depending on variable builddoc, weaving is performed or not
# using conditionnal in docs/Makefile.in
AM_CONDITIONAL(BUILDDOC, test x$builddoc = xtrue)

# search for texi2html
# it looks like automake does not take care of html doc creation
AC_PATH_PROG(TEXI2HTML, texi2html, no, ${PATH})

if test "$TEXI2HTML" = "no"; then 
   echo "**   Cannot find texi2html     **"
   echo "** HTML file creation disabled **"
   TEXI2HTML=echo
fi


# search for indent
AC_PATH_PROG(INDENT, indent, no, ${PATH})

if ! test "$INDENT" = "no"; then 
	indentversion=`$INDENT --version | grep GNU`
else 
	indentversion=
fi

if test "$INDENT" = "no" -o "$indentversion"x = x; then 
	AC_PATH_PROG(GINDENT, gindent, no, ${PATH})

	if test "$GINDENT" = "no"; then 
        	echo "** Cannot find GNU indent or gindent, C code formatting disabled **"
		INDENT=echo
	else
		INDENT=$GINDENT
	fi
fi

AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_HEADER_DIRENT
AC_CHECK_HEADERS(unistd.h string.h stdlib.h \
                 stdarg.h assert.h fcntl.h errno.h sys/param.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST

dnl Checks for library functions.
AC_TYPE_SIGNAL
AC_CHECK_FUNCS(getcwd strstr vsnprintf snprintf)

AC_MSG_CHECKING([for optarg in unistd.h])
AC_TRY_COMPILE(
[#include <unistd.h>],
[ char *string = optarg; int i = optind; ],
optarg_found=yes,
optarg_found=no)
AC_MSG_RESULT($optarg_found)

if test $optarg_found = yes; then
		AC_DEFINE(OPTARG_IN_UNISTD)
fi

gedatopdir=`$GESYMCONFIG --toplevel`
HOME=`echo $HOME`

if eval "test x$opt_rcdir = x"; then
        # path was not specified with --with-rcdir
        # don't set the GEDARCDIR in config.h
	AC_DEFINE_UNQUOTED(GEDARCDIR, "none")
        GEDARCDIR="$gedatopdir"
else
	# path WAS specified with --with-rcdir
	AC_DEFINE_UNQUOTED(GEDARCDIR, "$opt_rcdir")
        GEDARCDIR="$opt_rcdir"
fi


AC_DEFINE_UNQUOTED(GEDADATADIR, "$gedatopdir")
GEDADATADIR=$gedatopdir

AM_GNU_GETTEXT

AC_DEFINE_UNQUOTED(VERSION, "$VERSION")

AC_SUBST(HOME)
AC_SUBST(GTKVERSION)
AC_SUBST(GEDARCDIR)
AC_SUBST(GEDADATADIR)
AC_SUBST(PATHSEP)
AC_SUBST(OTHERPATHSEP)

AC_SUBST(X_CFLAGS)
AC_SUBST(X_LDFLAGS)
AC_SUBST(X_LIBS)
AC_SUBST(STROKE_LIB)
AC_SUBST(DL_LIB)
AC_SUBST(GTK)
AC_SUBST(GDK)
AC_SUBST(GLIB)

AC_SUBST(NOTANGLE)
AC_SUBST(NOTANGLEROOT)
AC_SUBST(NOTANGLEFLAGS)
AC_SUBST(GUILEINTERP)
AC_SUBST(NOWEAVE)
AC_SUBST(TEXI2HTML)
AC_SUBST(INDENT)

AC_CONFIG_FILES([Makefile m4/Makefile po/Makefile.in  intl/Makefile \
		src/Makefile        \
		include/Makefile    \
		scheme/Makefile     \
		bitmap/Makefile     \
		scripts/Makefile    \
		examples/Makefile   \
		docs/Makefile       \
		lib/Makefile        \
		noweb/Makefile      \
		tests/Makefile      \
		lib/system-gschemrc \
		scripts/geda_totexi \
		scripts/notangle_guile.scm ])
AC_CONFIG_COMMANDS([geda_totexi],[[chmod +x scripts/geda_totexi]],[[]])
AC_CONFIG_COMMANDS([notangle_guile.scm],[[chmod +x scripts/notangle_guile.scm]],[[]])
AC_OUTPUT
