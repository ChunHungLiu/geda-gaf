@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File x_script.c,,,Top
@chapter File @file{x_script.c}

@section File header

<<x_script.c : *>>=
<<x_script.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/x_script.nw instead */

<<x_script.c : include directives>>

/* CLEAN up line length in this file */

<<x_script.c : script_selection_ok()>>
<<x_script.c : script_selection_cancel()>>
<<x_script.c : setup_script_selector()>>

@


<<x_script.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * gschem - gEDA Schematic Capture
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<x_script.c : include directives>>=
#include <config.h>

#include <stdio.h>
#include <stdlib.h>
#ifdef HAVE_STRINGS_H
#include <strings.h>
#endif

#include <libgeda/libgeda.h>

#include "../include/x_states.h"
#include "../include/prototype.h"

@


@section Function @code{script_selection_ok()}

@defun script_selection_ok w w_current
@end defun

<<x_script.c : script_selection_ok()>>=
void
script_selection_ok(GtkWidget *w, TOPLEVEL *w_current)
{
  int len;
  char *string;

  /* who frees this? */
  string = gtk_file_selection_get_filename(
                                           GTK_FILE_SELECTION(w_current->sowindow));

  if(string != NULL) {
    len = strlen(string);

    if (string[len - 1] != '/') {
      s_log_message("Executing guile script [%s]\n", string);
      g_read_file(string);
    }
  }
  /* would like to move this earlier! */
  gtk_grab_remove(w_current->sowindow);
  gtk_widget_destroy(GTK_WIDGET (w_current->sowindow));
  w_current->sowindow = NULL;
}


@ %def script_selection_ok


@section Function @code{script_selection_cancel()}

@defun script_selection_cancel w w_current
@end defun

<<x_script.c : script_selection_cancel()>>=
void
script_selection_cancel (GtkWidget *w, TOPLEVEL *w_current)
{
  gtk_grab_remove(w_current->sowindow);
  gtk_widget_destroy (GTK_WIDGET (w_current->sowindow));
  w_current->sowindow = NULL;
}


@ %def script_selection_cancel


@section Function @code{setup_script_selector()}

@defun setup_script_selector w_current
@end defun

<<x_script.c : setup_script_selector()>>=
void
setup_script_selector (TOPLEVEL *w_current)
{
  if (!w_current->sowindow) {
    w_current->sowindow =
    gtk_file_selection_new("Script Execute...");
    gtk_window_position(GTK_WINDOW(w_current->sowindow),
                        GTK_WIN_POS_MOUSE);
    /* added 4/6/98 */
    gtk_file_selection_hide_fileop_buttons(
                                           GTK_FILE_SELECTION(w_current->sowindow));
    gtk_signal_connect(GTK_OBJECT (w_current->sowindow),
                       "destroy",
                       GTK_SIGNAL_FUNC(destroy_window),
                       &w_current->sowindow);

#if 0 /* this was causing the dialog box to not die */
    gtk_signal_connect(GTK_OBJECT(w_current->sowindow),
                       "delete_event",
                       GTK_SIGNAL_FUNC(destroy_window),
                       &w_current->sowindow);
#endif

    /* TODO: consistant function names for connect
     * connect_object */
    gtk_signal_connect (GTK_OBJECT (
                                    GTK_FILE_SELECTION (w_current->sowindow)->ok_button),
                        "clicked",
                        GTK_SIGNAL_FUNC(script_selection_ok),
                        w_current);

    gtk_signal_connect(GTK_OBJECT(
                                  GTK_FILE_SELECTION(w_current->sowindow)->
                                  cancel_button),
                       "clicked",
                       GTK_SIGNAL_FUNC(script_selection_cancel),
                       w_current);

  }

  if (!GTK_WIDGET_VISIBLE (w_current->sowindow)) {
    gtk_widget_show (w_current->sowindow);
    gtk_grab_add (w_current->sowindow);
  }
}


@ %def setup_script_selector

