@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File s_log.c,,,Top
@chapter File @file{s_log.c}

@section File header

<<s_log.c : *>>=
<<s_log.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/s_log.nw instead */

<<s_log.c : include directives>>
<<s_log.c : macro>>
<<s_log.c : s_log_init()>>
<<s_log.c : s_log_message()>>
<<s_log.c : s_log_close()>>

@


<<s_log.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * libgeda - gEDA's library
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<s_log.c : include directives>>=
#include <config.h>

#include <stdio.h>
#include <sys/stat.h>
#ifdef HAVE_STDLIB_H
#include <stdlib.h>
#endif
#ifdef HAVE_ASSERT_H
#include <assert.h>
#endif
#ifdef HAVE_UNISTD_H
#include <unistd.h>
#endif
#ifdef HAVE_STDARG_H
#include <stdarg.h>
#endif
#ifdef HAVE_FCNTL_H
#include <fcntl.h>
#endif
#ifdef HAVE_ERRNO_H
#include <errno.h>
#endif
#ifdef HAVE_STRING_H
#include <string.h>
#endif

#include <gtk/gtk.h>
#include <guile/gh.h>

#include "defines.h"
#include "struct.h"
#include "defines.h"
#include "globals.h"
#include "funcs.h"
#include "o_types.h"

#include "../include/prototype.h"

@


<<s_log.c : macro>>=
/* limit on a message is 240 bytes */

#define MSG_MAXLEN 240

@ %def MSG_MAXLEN


@section Function @code{s_log_init()}

@defun s_log_init cwd filename
@end defun

<<s_log.c : s_log_init()>>=
/* This function goes and finds the associated source files and loads ALL up */
/* only works for schematic files though */
void
s_log_init(char *cwd, char *filename)
{
  char *path; 
  if (do_logging == FALSE) {
    logfile_fd = -1;
    return;
  }

  path = u_basic_strdup_multiple(cwd, PATH_SEPARATER_STRING, filename, NULL);

  /* create log file */
  logfile_fd = open(path, O_RDWR|O_CREAT|O_TRUNC, 0600);	

  if (logfile_fd == -1) {
    logfile_fd = -1;
    do_logging = FALSE;
    fprintf(stderr, "Could not open log file: %s\n", path);
    fprintf(stderr, "Errno was: %d\n", errno);
  }

  free(path);
}


@ %def s_log_init


@section Function @code{s_log_message()}

@defun s_log_message format ...
@end defun

<<s_log.c : s_log_message()>>=
void
s_log_message(const gchar *format, ...)
{
  va_list args;

  char *buf=NULL;
  int len;
  int status;

  if (do_logging == FALSE) {
    return;
  }

  buf = (char *) malloc(sizeof(char)*MSG_MAXLEN);	

  va_start(args, format);	
  vsnprintf(buf, MSG_MAXLEN, format, args);
  va_end(args);

  if (buf == NULL) {
    return;
  }


  if (logfile_fd == -1) 
  return;

  len = strlen(buf);

  status = write(logfile_fd, buf, len);

  /* I'm not sure if tty vs both vs window_log stuff is working hack */
  /* libhack */
  /* temp out of commission */
  if (x_log_update_func)
  (*x_log_update_func)(buf);

  if (status == -1) {
    fprintf(stderr, "Could not write message to log file\n");
    fprintf(stderr, "Errno was: %d\n", errno);
  }

  free(buf);
}


@ %def s_log_message


@section Function @code{s_log_close()}

@defun s_log_close 
@end defun

<<s_log.c : s_log_close()>>=
void
s_log_close(void)
{
  if (do_logging == FALSE) {
    return;
  }

  do_logging = FALSE; /* subsequent messages are lost after the close */

  if (logfile_fd != -1) {
    close(logfile_fd);
    logfile_fd = -1;
  }
}


@ %def s_log_close

