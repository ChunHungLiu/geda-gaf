@c -*- mode: Noweb; noweb-doc-mode: texinfo-mode; noweb-code-mode: c-mode -*-

@node File x_stroke.c,,,Top
@chapter File @file{x_stroke.c}

@section File header

<<x_stroke.c : *>>=
<<x_stroke.c : copyright and license>>

/* DO NOT read or edit this file ! Use ../noweb/x_stroke.nw instead */

<<x_stroke.c : include directives>>
<<x_stroke : global variable>>
<<x_stroke.c : x_stroke_add_point()>>
<<x_stroke.c : x_stroke_erase_all()>>
<<x_stroke.c : x_stroke_free_all()>>
<<x_stroke.c : x_stroke_search_execute()>>

@


<<x_stroke.c : copyright and license>>=
/* gEDA - GPL Electronic Design Automation
 * gschem - gEDA Schematic Capture
 * Copyright (C) 1998-2000 Ales V. Hvezda
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111 USA
 */

@ 


<<x_stroke.c : include directives>>=
#include <config.h>

#include <math.h>

#include <libgeda/libgeda.h>

#include "../include/prototype.h"

@


<<x_stroke : global variable>>=
typedef struct st_stroke_point STROKE_POINT;

struct st_stroke_point {
        int x, y;
        STROKE_POINT *next;
};

static STROKE_POINT *stroke_points = NULL;

@ %def stroke_points


@section Function @code{x_stroke_add_point()}

@defun x_stroke_add_point w_current x y
@end defun

<<x_stroke.c : x_stroke_add_point()>>=
void
x_stroke_add_point(TOPLEVEL *w_current, int x, int y)
{
  STROKE_POINT *new_point;

  new_point = (STROKE_POINT *) malloc (sizeof(STROKE_POINT));

  new_point->x = x;
  new_point->y = y;

  if (stroke_points == NULL) {
    stroke_points = new_point;
    stroke_points->next = NULL;
  } else {
    new_point->next = stroke_points;
    stroke_points = new_point;
  }

  /* having this xored was causing some grief; when you zoomed
   * or changed the display, there would be point droppings, so
   * that's why this isn't xor */
#if 0
  gdk_gc_set_foreground(w_current->xor_gc,
                        x_get_color(w_current->stroke_color));
#endif

  gdk_gc_set_foreground(w_current->gc,
                        x_get_color(w_current->stroke_color));

  gdk_draw_point(w_current->window, w_current->gc, x, y);
}


@ %def x_stroke_add_point


@section Function @code{x_stroke_erase_all()}

@defun x_stroke_erase_all w_current
@end defun

<<x_stroke.c : x_stroke_erase_all()>>=
/* traverse list as well as free each point as you go along */
void
x_stroke_erase_all(TOPLEVEL *w_current)
{
  STROKE_POINT *temp;

  while(stroke_points != NULL) {

#if DEBUG
    printf("%d %d\n", stroke_points->x, stroke_points->y);
#endif

    /* was xor, wasn't working out... see above note */
    gdk_gc_set_foreground(
                          w_current->gc,
                          x_get_color(w_current->background_color));

    gdk_draw_point(w_current->window, w_current->gc,
                   stroke_points->x, stroke_points->y);

    temp = stroke_points;
    stroke_points = stroke_points->next;
    free (temp);
  }

  stroke_points = NULL;
}


@ %def x_stroke_erase_all


@section Function @code{x_stroke_free_all()}

@defun x_stroke_free_all 
@end defun

<<x_stroke.c : x_stroke_free_all()>>=
void
x_stroke_free_all(void)
{
  STROKE_POINT *temp;

  while(stroke_points != NULL) {
#if DEBUG
    printf("%d %d\n", stroke_points->x, stroke_points->y);
#endif

    temp = stroke_points;
    stroke_points = stroke_points->next;
    free (temp);
  }

  stroke_points = NULL;
}


@ %def x_stroke_free_all



@section Function @code{x_stroke_search_execute()}

@defun x_stroke_search_execute sequence
@end defun

<<x_stroke.c : x_stroke_search_execute()>>=
/* this is the function that does the actual work of the strokes */
/* by executing the right guile function which is associated with the stroke */
int 
x_stroke_search_execute(char *sequence)
{
  char guile_string[50]; /* Size hack */
  SCM eval;

  sprintf(guile_string, "(eval-stroke \"%s\")", sequence);

  eval = gh_eval_str(guile_string);

  return gh_scm2bool(eval);
}


@ %def x_stroke_search_execute


